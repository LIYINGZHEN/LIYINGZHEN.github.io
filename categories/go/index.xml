<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on YING ZHEN LI</title>
    <link>https://www.maxlivinci.com/categories/go/</link>
    <description>Recent content in Go on YING ZHEN LI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Jan 2019 16:48:37 +0100</lastBuildDate>
    
	<atom:link href="https://www.maxlivinci.com/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Table Driven Tests</title>
      <link>https://www.maxlivinci.com/old/2019-01-27-table-driven-tests/</link>
      <pubDate>Sun, 27 Jan 2019 16:48:37 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-27-table-driven-tests/</guid>
      <description>package main import &amp;quot;testing&amp;quot; func TestCoverage(t *testing.T) { type args struct { condition bool } tests := []struct { name string args args wantErr bool }{ // TODO: Add test cases. } for _, tt := range tests { t.Run(tt.name, func(t *testing.T) { if err := Coverage(tt.args.condition); (err != nil) != tt.wantErr { t.Errorf(&amp;quot;Coverage() error = %v, wantErr %v&amp;quot;, err, tt.wantErr) } }) } }  </description>
    </item>
    
    <item>
      <title>Strconv in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-27-strconv-in-go/</link>
      <pubDate>Sun, 27 Jan 2019 11:03:14 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-27-strconv-in-go/</guid>
      <description> ParseFloat strconv.ParseFloat(amount, 64)  ParseInt strconv.ParseInt(result, 10, 64)  FormatInt strconv.FormatInt(amount, 10)  ParseInt s := &amp;quot;1234&amp;quot; if res, err := strconv.ParseInt(s, 10, 64); err != nil { return err }  </description>
    </item>
    
    <item>
      <title>Ioutil in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-27-ioutil-in-go/</link>
      <pubDate>Sun, 27 Jan 2019 09:53:14 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-27-ioutil-in-go/</guid>
      <description> ReadAll payload, err := ioutil.ReadAll(recorder.Body); err != nil { t.Errorf(&amp;quot;Error parsing response body: %v&amp;quot;, err) }  </description>
    </item>
    
    <item>
      <title>Bufio in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-27-bufio-in-go/</link>
      <pubDate>Sun, 27 Jan 2019 09:33:26 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-27-bufio-in-go/</guid>
      <description> NewScanner scanner := bufio.NewScanner(r) // r io.Reader scanner.Split(bufio.ScanWords) for scanner.Scan() { result[scanner.Text()]++ }  NewReader r := bufio.NewReader(f) line, err := r.ReadString(&#39;\n&#39;)  </description>
    </item>
    
    <item>
      <title>Concurrency and parallelism</title>
      <link>https://www.maxlivinci.com/old/2019-01-25-concurrency-and-parallelism/</link>
      <pubDate>Fri, 25 Jan 2019 21:08:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-25-concurrency-and-parallelism/</guid>
      <description>Computer and software programs are useful because they do a lot of laborious work very fast and can also do multiple things at once. We want our programs to be able to do multiple things simultaneously, that is, multitask, and the success of a programming language can depend on how easy it is to write and understand multitasking programs.
Concurrency and parallelism are two terms that we are bound to come across often when looking into multitasking and they are often used interchangeably.</description>
    </item>
    
  </channel>
</rss>