<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on Max Li</title>
    <link>https://www.maxlivinci.com/tags/algorithm/</link>
    <description>Recent content in algorithm on Max Li</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.maxlivinci.com/tags/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reverse a Linked List</title>
      <link>https://www.maxlivinci.com/algorithm/linked-list_reverse-a-linked-list/</link>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/algorithm/linked-list_reverse-a-linked-list/</guid>
      <description>public class RevertLinkedList { Node head; public class Node { int data; Node next; public Node (int d) { this.data = d; } } public void push(int data) { Node newHead = new Node(data); newHead.next = head; head = newHead; } public void printList(Node head) { if (head == null) { System.out.println(&amp;#34;null&amp;#34;); return; } System.out.printf(&amp;#34;%s -&amp;gt; &amp;#34;, head.data); printList(head.next); } // Time: O(n), Space: O(1)  public Node revertLinkedList(Node head) { if (head == null || head.</description>
    </item>
    
    <item>
      <title>Merge Sort for Linked Lists</title>
      <link>https://www.maxlivinci.com/algorithm/linked-list_merge-sort-for-linked-lists/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/algorithm/linked-list_merge-sort-for-linked-lists/</guid>
      <description>public class MergeSort { Node head; public class Node { int data; Node next; public Node(int d) { this.data = d; } } public void printList(final Node head) { if (head == null) { System.out.println(&amp;#34;null&amp;#34;); return; } System.out.printf(&amp;#34;%s -&amp;gt; &amp;#34;, head.data); printList(head.next); } public void push(final int data) { Node newNode = new Node(data); newNode.next = head; head = newNode; } public Node merge(Node a, Node b) { if (a == null) { return b; } if (b == null) { return a; } Node newHead = null; if (a.</description>
    </item>
    
  </channel>
</rss>