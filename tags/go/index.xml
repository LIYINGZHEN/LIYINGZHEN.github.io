<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on YING ZHEN LI</title>
    <link>https://www.maxlivinci.com/tags/go/</link>
    <description>Recent content in Go on YING ZHEN LI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Nov 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.maxlivinci.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Concurrency Patterns</title>
      <link>https://www.maxlivinci.com/blog/2019-11-18-go-concurrency-patterns/</link>
      <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-11-18-go-concurrency-patterns/</guid>
      <description>Introduction Go&amp;rsquo;s concurrency primitives make it easy to construct streaming data pipelines that make efficient use of I/O and multiple CPUs.
Table of Contents  Lexical confinement Preventing Goroutine Leaks Error Handling Generator  Some Handy Generators  Fan-Out, Fan-In  Lexical Confinement Confinement is a simple yet powerful idea of ensuring information is only ever available from one concurrent process.
func main() { chanOwner := func() &amp;lt;-chan int { results := make(chan int, 5) go func() { defer close(results) for i := 0; i &amp;lt;= 5; i++ { results &amp;lt;- i } }() return results } consumer := func(results &amp;lt;-chan int) { for result := range results { fmt.</description>
    </item>
    
    <item>
      <title>How to end a goroutine</title>
      <link>https://www.maxlivinci.com/blog/2019-05-24-how-to-end-a-goroutine/</link>
      <pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-24-how-to-end-a-goroutine/</guid>
      <description>1. Stop Channel package main import ( &amp;quot;fmt&amp;quot; &amp;quot;time&amp;quot; ) func main() { ch := make(chan int) done := make(chan struct{}) go func() { i := 0 for { select { case ch &amp;lt;- i: i++ case &amp;lt;-done: close(ch) return } time.Sleep(100 * time.Millisecond) } }() go func() { time.Sleep(3 * time.Second) done &amp;lt;- struct{}{} }() for i := range ch { fmt.Println(&amp;quot;receive value: &amp;quot;, i) } fmt.Println(&amp;quot;finish&amp;quot;) }  2.</description>
    </item>
    
    <item>
      <title>Types in Go</title>
      <link>https://www.maxlivinci.com/blog/2019-05-22-types-in-go/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-22-types-in-go/</guid>
      <description>Terminology  Pre-Declared Type Composite Type (Type Literal) Named Type Unnamed Types Underlying Type Assignability Type Conversions Untyped constants Default Type  Pre-Declared Type Part of Named Type.
String Integer Boolean  Composite Type (Type Literal) Part of Unnamed Types.
Array Slice Map Struct  Named Type Named types can have their own method sets.
  Unnamed Types  Underlying Type Every type do have an underlying type. Pre-declared types and Composite Type refers to itself as the underlying type.</description>
    </item>
    
    <item>
      <title>Defer Function</title>
      <link>https://www.maxlivinci.com/blog/2019-05-19-defer-function/</link>
      <pubDate>Sun, 19 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-19-defer-function/</guid>
      <description>Defer three rules:  A deferred function&amp;rsquo;s arguments are evaluated when the defer statement is evaluated. Deferred function calls are executed in Last In First Out order after the surrounding function returns. Deferred functions may read and assign to the returning function&amp;rsquo;s named return values.  Tests What will be printed when the following code is executed?
Test1: func f() (r int) { defer func() { fmt.Printf(&amp;quot;f defer r is:%d \n&amp;quot;, r) r = r + 5 fmt.</description>
    </item>
    
    <item>
      <title>Factory patterns in Go</title>
      <link>https://www.maxlivinci.com/blog/2019-05-17-factory-patterns-in-go/</link>
      <pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-17-factory-patterns-in-go/</guid>
      <description>The factory pattern is a commonly used pattern in object oriented programming. In Go, there are many different ways in which you can use the factory pattern to make your code cleaner and more concise.
Go’s answer to classes, are structs. For example, the struct for a “Person”, along with a “Greet” method would look like this:
type Greeter interface { Greet() } type Person struct { Name string Age int } func (p Person) Greet() { fmt.</description>
    </item>
    
    <item>
      <title>Go Rune</title>
      <link>https://www.maxlivinci.com/blog/2019-05-16-go-rune/</link>
      <pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-16-go-rune/</guid>
      <description>package main import &amp;quot;fmt&amp;quot; func main() { var chinese = &amp;quot;人工智能&amp;quot; fmt.Println(&amp;quot;chinese length&amp;quot;, len(chinese)) fmt.Println(&amp;quot;chinese word length&amp;quot;, len([]rune(chinese))) fmt.Println(&amp;quot;chinese word length&amp;quot;, utf8.RuneCountInString(chinese)) for i, ch := range chinese { fmt.Printf(&amp;quot;(%d, %c)&amp;quot;, i, ch) // (0, 人)(3, 工)(6, 智)(9, 能) } fmt.Println() for i, ch := range []rune(chinese) { fmt.Printf(&amp;quot;(%d, %c)&amp;quot;, i, ch) // (0, 人)(1, 工)(2, 智)(3, 能) } fmt.Println() }  # chinses is 3 bytes chinese length 12 chinese word length 4 chinese word length 4 (0, 人)(3, 工)(6, 智)(9, 能) (0, 人)(1, 工)(2, 智)(3, 能)  </description>
    </item>
    
    <item>
      <title>Atomic Counters</title>
      <link>https://www.maxlivinci.com/blog/2019-05-12-atomic-counters/</link>
      <pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-12-atomic-counters/</guid>
      <description>Program with the the race condition package main import ( &amp;quot;fmt&amp;quot; &amp;quot;time&amp;quot; ) func main() { var ops uint64 for i := 0; i &amp;lt; 10000; i++ { go func() { ops = ops + 1 }() } time.Sleep(time.Second) fmt.Println(&amp;quot;ops:&amp;quot;, ops) }  ops: 9742  Solving the race condition using Mutex package main import ( &amp;quot;fmt&amp;quot; &amp;quot;sync&amp;quot; &amp;quot;time&amp;quot; ) func main() { var ops uint64 var m sync.Mutex for i := 0; i &amp;lt; 10000; i++ { go func() { m.</description>
    </item>
    
    <item>
      <title>Build a Web Crawler in Go</title>
      <link>https://www.maxlivinci.com/blog/2019-05-11-build-a-web-crawler-in-go/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-11-build-a-web-crawler-in-go/</guid>
      <description>package main import ( &amp;quot;crypto/tls&amp;quot; &amp;quot;flag&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;net/url&amp;quot; &amp;quot;os&amp;quot; &amp;quot;github.com/jackdanger/collectlinks&amp;quot; ) var visited = make(map[string]bool) func main() { // Parses the command-line flags. flag.Parse() args := flag.Args() fmt.Println(args) if len(args) &amp;lt; 1 { fmt.Println(&amp;quot;Please specify start page&amp;quot;) os.Exit(1) } queue := make(chan string) go func() { queue &amp;lt;- args[0] }() for uri := range queue { enqueue(uri, queue) } } func enqueue(uri string, queue chan string) { fmt.Println(&amp;quot;fetching&amp;quot;, uri) visited[uri] = true transport := &amp;amp;http.</description>
    </item>
    
    <item>
      <title>Functional options</title>
      <link>https://www.maxlivinci.com/blog/2019-05-10-functional-options/</link>
      <pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-10-functional-options/</guid>
      <description>Here&amp;rsquo;s the simplest example showing how to do functional options in Golang.
They&amp;rsquo;re a great way to enable users to set options and ease adding new options later.
package main import ( &amp;quot;flag&amp;quot; &amp;quot;fmt&amp;quot; ) // This is your function used by users to set options. func Host(host string) func(*Server) { return func(s *Server) { s.Host = host } } // This is another function used by users to set options.</description>
    </item>
    
    <item>
      <title>Data races in Go</title>
      <link>https://www.maxlivinci.com/blog/2019-05-09-data-races-in-go/</link>
      <pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-09-data-races-in-go/</guid>
      <description>Go is known for how easy it is to build concurrent programs in it. But, with all this concurrency, comes the possibility of the dreaded data race — one of the hardest bugs to debug if you’re ever unfortunate enough to encounter it in your code.
In this post, we will go through a sample program that causes a data race, and detect the race condition with the race detector tool.</description>
    </item>
    
    <item>
      <title>Standard Package Layout</title>
      <link>https://www.maxlivinci.com/blog/2019-05-08-standard-package-layout/</link>
      <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-08-standard-package-layout/</guid>
      <description>myapp/ cmd/ server/ main.go /internal http/ middleware.go middleware_test.go route.go server.go userhandler.go psql/ psql.go userrepository.go service/ userservice/ userservice.go userservice_test.go # Domain types models.go  Domain types Your application has a logical, high-level language that describes how data and processes interact. This is your domain. If you have an e-commerce application your domain involves things like customers, accounts, charging credit cards, and handling inventory. If you’re Facebook then your domain is users, likes, &amp;amp; relationships.</description>
    </item>
    
    <item>
      <title>Password Hashing</title>
      <link>https://www.maxlivinci.com/blog/2019-05-07-password-hashing/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-07-password-hashing/</guid>
      <description>This example will show how to hash passwords using bcrypt. For this we have to go get the golang bcrypt library like so:
$ go get golang.org/x/crypto/bcrypt  From now on, every application we write will be able to make use of this library.
// passwords.go package main import ( &amp;quot;fmt&amp;quot; &amp;quot;golang.org/x/crypto/bcrypt&amp;quot; ) func HashPassword(password string) (string, error) { bytes, err := bcrypt.GenerateFromPassword([]byte(password), 14) return string(bytes), err } func CheckPasswordHash(password, hash string) bool { err := bcrypt.</description>
    </item>
    
    <item>
      <title>Go Memory Layout</title>
      <link>https://www.maxlivinci.com/blog/2019-05-06-go-memory-layout/</link>
      <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-06-go-memory-layout/</guid>
      <description>How memory works internally When you have a struct like this one:
type myStruct struct { myInt bool // 1 byte myFloat float64 // 8 bytes myBool int32 // 4 bytes }  As you see a boolean takes 1 byte, a float64 8 bytes, and an int32 4 bytes.
But the memory allocates consecutive packet of 8 bytes. So instead of taking 1 + 8 + 4 = 13 bytes.</description>
    </item>
    
    <item>
      <title>Go Escape Analysis</title>
      <link>https://www.maxlivinci.com/blog/2019-05-05-go-escape-analysis/</link>
      <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-05-go-escape-analysis/</guid>
      <description>Garbage collection is a convenient feature of Go - automatic memory management makes code cleaner and memory leaks less likely. However, GC also adds overhead as the program periodically needs to stop and collect unused objects. The Go compiler is smart enough to automatically decide whether a variable should be allocated on the heap, where it will later need to be garbage collected, or whether it can be allocated as part of the stack frame of the function which declared it.</description>
    </item>
    
    <item>
      <title>Go Command link</title>
      <link>https://www.maxlivinci.com/blog/2019-05-04-go-command-link/</link>
      <pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-04-go-command-link/</guid>
      <description>The -X Go linker option, which you can set with -ldflags, sets the value of a string variable in the Go program being linked. You use it like this: -X main.version 1.0.0.
A simple example: let&amp;rsquo;s say you have this source file saved as hello.go.
package main import &amp;quot;fmt&amp;quot; var who = &amp;quot;World&amp;quot; func main() { fmt.Printf(&amp;quot;Hello, %s.\n&amp;quot;, who) }  Then you can use go run (or other build commands like go build or go install) with the -ldflags option to modify the value of the who variable:</description>
    </item>
    
    <item>
      <title>The Relationship Between Interfaces and Reflection</title>
      <link>https://www.maxlivinci.com/blog/2019-05-03-the-relationship-between-interfaces-and-reflection/</link>
      <pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-03-the-relationship-between-interfaces-and-reflection/</guid>
      <description>Interfaces are one of the fundamental tools for abstraction in Go. Interfaces store type information when assigned a value. Reflection is a method of examining type and value information at runtime.
Go implements reflection with the reflect package which provides types and methods for inspecting portions of the interface structure and even modifying values at runtime.
Assigning a Value to an Interface An interface encodes three things: a value, a method set, and the type of the stored value.</description>
    </item>
    
    <item>
      <title>Interfaces in Go</title>
      <link>https://www.maxlivinci.com/blog/2019-05-02-interfaces-in-go/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-02-interfaces-in-go/</guid>
      <description>An interface type is defined by a set of methods. A value of interface type can hold any value that implements those methods.
Go&amp;rsquo;s interfaces let you use duck typing.
Static Type V.S. Dynamic Type V.S. Dynamic Value  Static Type: A static type of interface is interface itself. Dynamic Type: The type of the value which the interface type holds. Dynamic Value: The value of the value which the interface type holds.</description>
    </item>
    
    <item>
      <title>Go Context</title>
      <link>https://www.maxlivinci.com/blog/2019-05-01-go-context/</link>
      <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-01-go-context/</guid>
      <description>There are two classical way to control concurrent, one is WaitGroup another way is Context. And today we are going to talk about Context.
Using Channel package main import ( &amp;quot;fmt&amp;quot; &amp;quot;time&amp;quot; ) func monitor(stop chan struct{}) &amp;lt;-chan string { ch := make(chan string) go func() { for { select { case &amp;lt;-stop: close(ch) return case &amp;lt;-time.Tick(1 * time.Second): ch &amp;lt;- &amp;quot;Status OK&amp;quot; } } }() return ch } func main() { stop := make(chan struct{}) go func() { time.</description>
    </item>
    
    <item>
      <title>Update map values in Go</title>
      <link>https://www.maxlivinci.com/blog/2019-04-30-update-map-values-in-go/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-04-30-update-map-values-in-go/</guid>
      <description>We can&amp;rsquo;t change values associated with keys in a map, we can only reassign values.
So this leaves us 2 possible options:
 1. Store pointers in the map, so you can modify the pointed object (which is not inside the map data structure). 2. Store struct values, but when you modify it, you need to reassign it to the key.  1. Using pointers Storing pointers in the map: dataManaged := map[string]*Data{}</description>
    </item>
    
    <item>
      <title>Pass by pointer vs pass by value in Go</title>
      <link>https://www.maxlivinci.com/blog/2019-04-29-pass-by-pointer-vs-pass-by-value-in-go/</link>
      <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-04-29-pass-by-pointer-vs-pass-by-value-in-go/</guid>
      <description>Go allows to pass parameters both by pointers (sometimes it’s called by reference) and by values. In this post we will compare both approaches, paying special attention to different contexts that may affect the choice.
Pass by pointer vs pass by value Strictly speaking, there is only one way to pass parameters in Go - by value. Every time a variable is passed as parameter, a new copy of the variable is created and passed to called function or method.</description>
    </item>
    
    <item>
      <title>Go Tooling Essentials</title>
      <link>https://www.maxlivinci.com/blog/2019-04-28-go-tooling-essentials/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-04-28-go-tooling-essentials/</guid>
      <description>New to the Go tools? Or do you want to expand your knowledge? This article is about the flags for the Go tools everyone should know.
$ go test -v It provides chatty output for the testing. It prints the test name, its status (failed or passed), how much it took to run the test, any logs from the test case, etc.
go test without the -v flag is highly quiet, I always use it with -v turned on.</description>
    </item>
    
    <item>
      <title>Unit Testing HTTP Servers</title>
      <link>https://www.maxlivinci.com/blog/2019-04-27-unit-testing-http-servers/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-04-27-unit-testing-http-servers/</guid>
      <description>You’re building a web (HTTP) service in Go, and you want to unit test your handler functions. You’ve got a grip on Go’s net/http package, but you’re not sure where to start with testing that your handlers return the correct HTTP status codes, HTTP headers or response bodies.
Let’s walk through how you go about this, injecting the necessary dependencies, and mocking the rest.
A Basic Handler We’ll start by writing a basic test: we want to make sure our handler returns a HTTP 200 (OK) status code.</description>
    </item>
    
    <item>
      <title>JSON and Go</title>
      <link>https://www.maxlivinci.com/blog/2019-04-26-json-and-go/</link>
      <pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-04-26-json-and-go/</guid>
      <description>Parsing a format like JSON in a statically typed language like Go presents a bit of a problem. If anything could show up in the JSON body, how does the compiler know how to setup memory to have a spot to place everything?
There are two answers to this. The easy option, for when you know what your data will look like, is to parse the JSON into a struct you’ve defined.</description>
    </item>
    
    <item>
      <title>Efficient String Concatenation in Go</title>
      <link>https://www.maxlivinci.com/blog/2019-04-25-efficient-string-concatenation-in-go/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-04-25-efficient-string-concatenation-in-go/</guid>
      <description>In this article I investigate the computational performance of various string concatenation methods in the Go programming language.
To evaluate the options, I prepared some typical Go benchmarks using the Go testing package. A benchmark looks something like this:
func BenchmarkNative(b *testing.B) { var s string next := nextString() for i := 0; i &amp;lt; b.N; i++ { s += next() } }  For the purposes of these benchmarks, I imagined having a process that returns string segments one by one, and these segments need to be concatenated to form one string.</description>
    </item>
    
    <item>
      <title>Writing middleware in Golang</title>
      <link>https://www.maxlivinci.com/blog/2019-04-24-writing-middleware-in-golang/</link>
      <pubDate>Wed, 24 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-04-24-writing-middleware-in-golang/</guid>
      <description>When we talk about Middleware in Go, at its simplest, we are really talking about running code before and/or after our handler code in a HTTP request lifecycle. For example, logging middleware might write the incoming request details to a log, then call the handler code, before writing details about the response to the log. One of the cool things about middleware, if implemented correctly, is that these units are extremely flexible, reusable, and sharable.</description>
    </item>
    
    <item>
      <title>Working with Files in Go</title>
      <link>https://www.maxlivinci.com/blog/2019-04-23-working-with-files-in-go/</link>
      <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-04-23-working-with-files-in-go/</guid>
      <description>One of the fundamental aspects of UNIX is that everything is a file. We don&amp;rsquo;t necessarily know what the file descriptor maps to, that is abstracted by the operating system&amp;rsquo;s device drivers. The operating system provides us an interface to the device in the form of a file.
The reader and writer interfaces in Go are similar abstractions. We simply read and write bytes, without the need to understand where or how the reader gets its data or where the writer is sending the data.</description>
    </item>
    
    <item>
      <title>Slices in Go</title>
      <link>https://www.maxlivinci.com/blog/2019-04-22-slices-in-go/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-04-22-slices-in-go/</guid>
      <description>Arrays Arrays in Go have two relevant properties:
 They have a fixed size; [5]int is is distinct from [3]int. They are value types. Consider this example:  package main import &amp;quot;fmt&amp;quot; func main() { var a [5]int b := a b[2] = 7 fmt.Println(a, b) // prints [0 0 0 0 0] [0 0 7 0 0] }  The statement b := a declares a new variable, b, of type [5]int, and copies the contents of a to b.</description>
    </item>
    
    <item>
      <title>Gopher Reading List</title>
      <link>https://www.maxlivinci.com/blog/2019-04-21-gopher-reading-list/</link>
      <pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-04-21-gopher-reading-list/</guid>
      <description>Here is a reading list of blog posts about Go. It aspires to include only the most useful and relevant material that anyone writing Go should eventually read. By definition, the list is a work in progress.
Rather than being comprehensive, the list is a curated selection fixed at 200 entries.
Go is growing fast and so are the number of blog posts about it. If an interested reader knows of a great post not on this list, please open an issue with a link to the post.</description>
    </item>
    
  </channel>
</rss>