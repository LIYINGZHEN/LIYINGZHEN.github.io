<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leetcode on YING ZHEN LI</title>
    <link>https://www.maxlivinci.com/tags/leetcode/</link>
    <description>Recent content in Leetcode on YING ZHEN LI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.maxlivinci.com/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LeetCode - Merge Two Sorted Lists</title>
      <link>https://www.maxlivinci.com/blog/2019-06-01-leetcode-merge-two-sorted-lists/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-06-01-leetcode-merge-two-sorted-lists/</guid>
      <description>LeetCode
Problem Statement Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.
Example
Input: 1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4 Output: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4  Solution /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode { // Check boundary condition if l1 == nil { return l2 } if l2 == nil { return l1 } // Create dummy node dummy := ListNode{} head := &amp;amp;dummy // Connect l1 and l2 for l1 !</description>
    </item>
    
    <item>
      <title>LeetCode - Rotate Array</title>
      <link>https://www.maxlivinci.com/blog/2019-05-31-leetcode-rotate-array/</link>
      <pubDate>Fri, 31 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-31-leetcode-rotate-array/</guid>
      <description> LeetCode
Problem Statement Given an array, rotate the array to the right by k steps, where k is non-negative.
Example 1
Input: [1,2,3,4,5,6,7] and k = 3 Output: [5,6,7,1,2,3,4] Explanation: rotate 1 steps to the right: [7,1,2,3,4,5,6] rotate 2 steps to the right: [6,7,1,2,3,4,5] rotate 3 steps to the right: [5,6,7,1,2,3,4]  Example 2
Input: [-1,-100,3,99] and k = 2 Output: [3,99,-1,-100] Explanation: rotate 1 steps to the right: [99,-1,-100,3] rotate 2 steps to the right: [3,99,-1,-100]  Solution func rotate(nums []int, k int) { n := len(nums) k = k % n reverse(nums, 0, n-1) reverse(nums, 0, k-1) reverse(nums, k, n-1) } func reverse(nums []int, i int, j int) { for i &amp;lt; j { nums[i], nums[j] = nums[j], nums[i] i++ j-- } }  </description>
    </item>
    
    <item>
      <title>LeetCode - Remove Duplicates from Sorted Array</title>
      <link>https://www.maxlivinci.com/blog/2019-05-30-leetcode-remove-duplicates-from-sorted-array/</link>
      <pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-30-leetcode-remove-duplicates-from-sorted-array/</guid>
      <description>LeetCode
Problem Statement Given a sorted array of numbers, remove the duplicates in-place such that each element appear only once and return the new length.
Example 1
Given nums = [1,1,2], Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesnâ€™t matter what you leave beyond the returned length.  Example 2
Given nums = [0,0,1,1,1,2,2,3,3,4], Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.</description>
    </item>
    
  </channel>
</rss>