<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leetcode on YING ZHEN LI</title>
    <link>https://www.maxlivinci.com/tags/leetcode/</link>
    <description>Recent content in Leetcode on YING ZHEN LI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.maxlivinci.com/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LeetCode - 88. Merge Sorted Array</title>
      <link>https://www.maxlivinci.com/blog/2019-06-02-leetcode-merge-sorted-array/</link>
      <pubDate>Sun, 02 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-06-02-leetcode-merge-sorted-array/</guid>
      <description>LeetCode
Problem Statement Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.
Note:
 The number of elements initialized in nums1 and nums2 are m and n respectively. You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.  Example
 Input:
nums1 = [1,2,3,0,0,0], m = 3</description>
    </item>
    
    <item>
      <title>LeetCode - Merge Two Sorted Lists</title>
      <link>https://www.maxlivinci.com/blog/2019-06-01-leetcode-merge-two-sorted-lists/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-06-01-leetcode-merge-two-sorted-lists/</guid>
      <description>LeetCode
Problem Statement Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.
Example
 Input: 1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4
Output: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4
 Solution /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode { // Check boundary condition if l1 == nil { return l2 } if l2 == nil { return l1 } // Create dummy node dummy := ListNode{} head := &amp;amp;dummy // Connect l1 and l2 for l1 !</description>
    </item>
    
    <item>
      <title>LeetCode - Rotate Array</title>
      <link>https://www.maxlivinci.com/blog/2019-05-31-leetcode-rotate-array/</link>
      <pubDate>Fri, 31 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-31-leetcode-rotate-array/</guid>
      <description>LeetCode
Problem Statement Given an array, rotate the array to the right by k steps, where k is non-negative.
Example 1
 Input: [1,2,3,4,5,6,7] and k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
 Example 2
 Input: [-1,-100,3,99] and k = 2
Output: [3,99,-1,-100]
Explanation:
rotate 1 steps to the right: [99,-1,-100,3]</description>
    </item>
    
    <item>
      <title>LeetCode - Remove Duplicates from Sorted Array</title>
      <link>https://www.maxlivinci.com/blog/2019-05-30-leetcode-remove-duplicates-from-sorted-array/</link>
      <pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-05-30-leetcode-remove-duplicates-from-sorted-array/</guid>
      <description>LeetCode
Problem Statement Given a sorted array of numbers, remove the duplicates in-place such that each element appear only once and return the new length.
Example 1
 Given nums = [1,1,2],
Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.
It doesnâ€™t matter what you leave beyond the returned length.
 Example 2
 Given nums = [0,0,1,1,1,2,2,3,3,4],</description>
    </item>
    
  </channel>
</rss>