<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Olds on YING ZHEN LI</title>
    <link>https://www.maxlivinci.com/old/</link>
    <description>Recent content in Olds on YING ZHEN LI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Mar 2019 18:02:49 +0100</lastBuildDate>
    
	<atom:link href="https://www.maxlivinci.com/old/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PostgreSQL</title>
      <link>https://www.maxlivinci.com/old/2019-03-25-postgres/</link>
      <pubDate>Mon, 25 Mar 2019 18:02:49 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-25-postgres/</guid>
      <description>Setting up a password for the postgres role By default, local connections to PostgreSQL use the peer authentication sys- tem. That means that instead of asking for a password, they check to see if we are currently logged into a user (a linux user) that matches a user name in Postgres. We are going to change the way we do authentication and instead tell Postgres to use an encrypted password, but first we need to actually set a password for the postgres user.</description>
    </item>
    
    <item>
      <title>HTTP Response codes</title>
      <link>https://www.maxlivinci.com/old/2019-03-17-http-response-codes/</link>
      <pubDate>Sun, 17 Mar 2019 07:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-17-http-response-codes/</guid>
      <description>400 Bad Request This response indicates that the request could not be understood by the client due to a malformed request or due to a failure of domain validation (missing data, or an operation that would cause invalid state).
401 Unauthorized This indicates that the request requires user authentication and will include a WWWAuthenticate header containing a challenge applicable to the requested resource. If the user has included the required credentials in the WWW-Authenticate header, then the response should include an error object that may contain relevant diagnostic information.</description>
    </item>
    
    <item>
      <title>Go</title>
      <link>https://www.maxlivinci.com/old/2019-03-16-go/</link>
      <pubDate>Sat, 16 Mar 2019 19:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-16-go/</guid>
      <description>2.3. Zero Value https://play.golang.org/p/yb6qYVZKYKR
2.6.2. Package Initialization Programs initialize and begin execution from the main package. If the main package imports other packages, they will be imported in the compile time. If one package is imported many times, it will be only compiled once. After importing packages, programs will initialize the constants and variables within the imported packages, then execute the init function if it exists, and so on. After all the other packages are initialized, programs will initialize constants and variables in the main package, then execute the init function inside the package if it exists.</description>
    </item>
    
    <item>
      <title>Drone</title>
      <link>https://www.maxlivinci.com/old/2019-03-14-drone/</link>
      <pubDate>Thu, 14 Mar 2019 08:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-14-drone/</guid>
      <description> The .drone.yml file  </description>
    </item>
    
    <item>
      <title>Linux</title>
      <link>https://www.maxlivinci.com/old/2019-03-14-linux/</link>
      <pubDate>Thu, 14 Mar 2019 07:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-14-linux/</guid>
      <description> Commands ls -l # Changes the working directory to your home directory. cd # Changes the working directory to the previous working directory. cd - # i - interactive # v - verbose cp -iv /etc/passwd . # i - interactive # r - recursive rm -ir fun  </description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://www.maxlivinci.com/old/2019-03-13-redis/</link>
      <pubDate>Wed, 13 Mar 2019 06:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-13-redis/</guid>
      <description>Commands redis-cli # Local redis-cli -h host -p port -a password # Run Commands on the Remote Server redis-cli INFO memory  Data Types  Strings Lists Hashes Sets Sorted Sets  Strings # SET first &amp;quot;First Key value&amp;quot; GET first # EXPIRE command adds an expiration time (in seconds) to a given key. EXPIRE first 10 # TTL (Time To Live) command returns the amount of seconds a given key has left to live.</description>
    </item>
    
    <item>
      <title>MongoDB</title>
      <link>https://www.maxlivinci.com/old/2019-03-09-mongodb/</link>
      <pubDate>Sun, 10 Mar 2019 16:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-09-mongodb/</guid>
      <description>Indexing and query optimization  Indexes in MongoDB are very important. Indexes that use more than one key like this are called compound indexes. The order of keys in a compound index matters. Aa query where one term demands an exact match and another specifies a range requires a compound index where the range key comes second.  For example:
If we have this query, then the manufacturer shoud be the first index.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://www.maxlivinci.com/old/2019-03-08-docker/</link>
      <pubDate>Fri, 08 Mar 2019 13:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-08-docker/</guid>
      <description>Commands # Remove unused data. docker system prune -a -f # docker commit id # Tagging an image under an additional tag. docker tag &amp;lt;image-name&amp;gt; &amp;lt;docker-hub-id&amp;gt;/&amp;lt;image-name&amp;gt;:&amp;lt;version&amp;gt; # Attach local standard input, output, and error streams to a running container. docker attach &amp;lt;CONTAINER&amp;gt; # Shows statistics for a container docker stats &amp;lt;CONTAINER&amp;gt; # Searching for images docker search puppet # Inspecting the container’s processes docker top # List port mappings or a specific mapping for the container.</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>https://www.maxlivinci.com/old/2019-03-08-kubernetes/</link>
      <pubDate>Fri, 08 Mar 2019 12:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-08-kubernetes/</guid>
      <description>Terminology Minikube: Minikube is a tool that sets up a single-node cluster that’s great for both testing Kubernetes and developing apps locally.
Kubelet:
Master Node: The master node, which hosts the Kubernetes Control Plane that controls and manages the whole Kubernetes system.
Node: Worker nodes that run the actual applications you deploy.
Pod: Running containers in Kubernetes.
Service: Enabling clients to discover and talk to pods.
Commands General Commands # Starting a Minikube virtual machine.</description>
    </item>
    
    <item>
      <title>Table Driven Tests</title>
      <link>https://www.maxlivinci.com/old/2019-01-27-table-driven-tests/</link>
      <pubDate>Sun, 27 Jan 2019 16:48:37 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-27-table-driven-tests/</guid>
      <description>package main import &amp;quot;testing&amp;quot; func TestCoverage(t *testing.T) { type args struct { condition bool } tests := []struct { name string args args wantErr bool }{ // TODO: Add test cases. } for _, tt := range tests { t.Run(tt.name, func(t *testing.T) { if err := Coverage(tt.args.condition); (err != nil) != tt.wantErr { t.Errorf(&amp;quot;Coverage() error = %v, wantErr %v&amp;quot;, err, tt.wantErr) } }) } }  </description>
    </item>
    
    <item>
      <title>Strconv in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-27-strconv-in-go/</link>
      <pubDate>Sun, 27 Jan 2019 11:03:14 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-27-strconv-in-go/</guid>
      <description> ParseFloat strconv.ParseFloat(amount, 64)  ParseInt strconv.ParseInt(result, 10, 64)  FormatInt strconv.FormatInt(amount, 10)  ParseInt s := &amp;quot;1234&amp;quot; if res, err := strconv.ParseInt(s, 10, 64); err != nil { return err }  </description>
    </item>
    
    <item>
      <title>Ioutil in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-27-ioutil-in-go/</link>
      <pubDate>Sun, 27 Jan 2019 09:53:14 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-27-ioutil-in-go/</guid>
      <description> ReadAll payload, err := ioutil.ReadAll(recorder.Body); err != nil { t.Errorf(&amp;quot;Error parsing response body: %v&amp;quot;, err) }  </description>
    </item>
    
    <item>
      <title>Bufio in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-27-bufio-in-go/</link>
      <pubDate>Sun, 27 Jan 2019 09:33:26 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-27-bufio-in-go/</guid>
      <description> NewScanner scanner := bufio.NewScanner(r) // r io.Reader scanner.Split(bufio.ScanWords) for scanner.Scan() { result[scanner.Text()]++ }  NewReader r := bufio.NewReader(f) line, err := r.ReadString(&#39;\n&#39;)  </description>
    </item>
    
    <item>
      <title>OpenAPI Specification</title>
      <link>https://www.maxlivinci.com/old/2019-01-26-open-api-specification/</link>
      <pubDate>Sat, 26 Jan 2019 18:40:48 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-26-open-api-specification/</guid>
      <description>OpenAPI lets us define RESTful APIs in a standardized manner, and they can be defined without being tied down to any particular programming language or framework being used.
Let&amp;rsquo;s list the general structure of an OpenAPI specification and use it to redefine the Books API described in Chapter 4, The RESTful Web.
If we look at the Books API title, we can define the following elements to describe the API:</description>
    </item>
    
    <item>
      <title>Go Environment</title>
      <link>https://www.maxlivinci.com/old/2019-01-26-go-environment/</link>
      <pubDate>Sat, 26 Jan 2019 11:20:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-26-go-environment/</guid>
      <description>GOROOT To access to the Go binary and its libraries
GOPATH To tell the Go compiler where to find the source code for the project and its dependencies.
src/ Contain the source code of our projects and their dependencies.
pkg/ To store reusable machine code that can be readily included in our Go binary.
bin/ Go compiles and builds our projects into executable binaries and places them in this directory.</description>
    </item>
    
    <item>
      <title>Worker pools</title>
      <link>https://www.maxlivinci.com/old/2019-01-26-worker-pools/</link>
      <pubDate>Sat, 26 Jan 2019 09:52:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-26-worker-pools/</guid>
      <description>A worker pool is a set of threads that are about to process jobs assigned to them.  Example package main import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;strconv&amp;quot; &amp;quot;sync&amp;quot; &amp;quot;time&amp;quot; ) type Client struct { id int integer int } type Data struct { job Client square int } var ( size = 10 clients = make(chan Client, size) data = make(chan Data, size) ) func worker(w *sync.WaitGroup) { for c := range clients { square := c.</description>
    </item>
    
    <item>
      <title>Concurrency and parallelism</title>
      <link>https://www.maxlivinci.com/old/2019-01-25-concurrency-and-parallelism/</link>
      <pubDate>Fri, 25 Jan 2019 21:08:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-25-concurrency-and-parallelism/</guid>
      <description>Computer and software programs are useful because they do a lot of laborious work very fast and can also do multiple things at once. We want our programs to be able to do multiple things simultaneously, that is, multitask, and the success of a programming language can depend on how easy it is to write and understand multitasking programs.
Concurrency and parallelism are two terms that we are bound to come across often when looking into multitasking and they are often used interchangeably.</description>
    </item>
    
    <item>
      <title>Unix Signals</title>
      <link>https://www.maxlivinci.com/old/2019-01-25-unix-signals/</link>
      <pubDate>Fri, 25 Jan 2019 20:34:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-25-unix-signals/</guid>
      <description>Ctrl + C sends the SIGINT signal
 number 1 SIGTERM
 number 9 SIGKILL
  package main import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;os/signal&amp;quot; &amp;quot;syscall&amp;quot; &amp;quot;time&amp;quot; ) func handle(signal os.Signal) { fmt.Println(&amp;quot;Received:&amp;quot;, signal) } func main() { sigs := make(chan os.Signal, 1) signal.Notify(sigs) go func() { for { sig := &amp;lt;-sigs switch sig { case os.Interrupt: handle(sig) case syscall.SIGTERM: handle(sig) os.Exit(0) case syscall.SIGUSR2: fmt.Println(&amp;quot;Handling syscall.SIGUSR2!&amp;quot;) default: fmt.Println(&amp;quot;Ignoring:&amp;quot;, sig) } } }() for { fmt.</description>
    </item>
    
    <item>
      <title>Interfaces in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-24-interface-in-go/</link>
      <pubDate>Thu, 24 Jan 2019 18:28:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-24-interface-in-go/</guid>
      <description>Interfaces provide a way to declare types that define only behavior. This behavior can be implemented by concrete types, such as struct or named types, via methods. When a concrete type implements the set of methods for an interface, values of the concrete type can be assigned to variables of the interface type. Then method calls against the interface value actually call into the equivalent method of the concrete value.</description>
    </item>
    
    <item>
      <title>Struct in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-22-pointers-in-go/</link>
      <pubDate>Tue, 22 Jan 2019 09:34:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-22-pointers-in-go/</guid>
      <description>Pointers provide a way to share data across function boundaries. Having the ability to share and reference data with a pointer provides flexbility. It also helps our programs minimize the amount of memory they need and can add some extra performance.
Notes  Use pointers to share data. Values in Go are always pass by value. &amp;ldquo;Value of&amp;rdquo;, what&amp;rsquo;s in the box. &amp;ldquo;Address of&amp;rdquo; ( &amp;amp; ), where is the box.</description>
    </item>
    
    <item>
      <title>General Go coding advices</title>
      <link>https://www.maxlivinci.com/old/2019-01-19-general-go-coding-advices/</link>
      <pubDate>Sat, 19 Jan 2019 17:05:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-19-general-go-coding-advices/</guid>
      <description>The following list offers practical advices that will help you write better Go code:
 If you have an error in a Go function, either log it or return it, do not do both unless you have a really good reason for doing so! Go interfaces define behaviors, not data and data structures. Use the io.Reader and io.Writer interfaces because they make your code more extensible. Make sure that you pass a pointer to a variable of a function only when needed.</description>
    </item>
    
    <item>
      <title>Find out Go Environment</title>
      <link>https://www.maxlivinci.com/old/2019-01-19-find-out-go-environment/</link>
      <pubDate>Sat, 19 Jan 2019 17:02:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-19-find-out-go-environment/</guid>
      <description>package main import ( &amp;quot;fmt&amp;quot; &amp;quot;runtime&amp;quot; ) func main() { fmt.Print(&amp;quot;You are using &amp;quot;, runtime.Compiler, &amp;quot; &amp;quot;) fmt.Println(&amp;quot;on a&amp;quot;, runtime.GOARCH, &amp;quot;machine&amp;quot;) fmt.Println(&amp;quot;Using Go version&amp;quot;, runtime.Version()) fmt.Println(&amp;quot;Number of CPUs:&amp;quot;, runtime.NumCPU()) fmt.Println(&amp;quot;Number of Goroutines:&amp;quot;, runtime.NumGoroutine()) }  xecuting goEnv.go on a macOS High Sierra machine with Go version 1.9.2 will create the following output:
$ go run goEnv.go You are using gc on a amd64 machine Using Go version go1.9.2 Number of CPUs: 8 Number of Goroutines: 1  </description>
    </item>
    
    <item>
      <title>Writing to log files</title>
      <link>https://www.maxlivinci.com/old/2019-01-19-writing-to-log-files/</link>
      <pubDate>Sat, 19 Jan 2019 15:44:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-19-writing-to-log-files/</guid>
      <description>Generally speaking, using a log file to write some information is considered a better practice than writing the same output on the screen for two reasons:
 The output does not get lost as it is stored in a file
 You can search and process log files using Unix tools such as grep(1), awk(1), and sed(1), which cannot be done when messages are printed on a Terminal window</description>
    </item>
    
    <item>
      <title>Reading from Standard Input</title>
      <link>https://www.maxlivinci.com/old/2019-01-19-reading-from-standard-input/</link>
      <pubDate>Sat, 19 Jan 2019 15:33:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-19-reading-from-standard-input/</guid>
      <description>package main import ( &amp;quot;bufio&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; ) func main() { var f *os.File f = os.Stdin defer f.Close() scanner := bufio.NewScanner(f) for scanner.Scan() { fmt.Println(&amp;quot;&amp;gt;&amp;quot;, scanner.Text()) } }  The execution of stdIN.go will produce the following type of output:
$ go run stdIN.go 21 &amp;gt; 21 This is Mihalis! &amp;gt; This is Mihalis!  In Unix, you can tell a program to stop reading data from standard input by pressing Ctrl + D.</description>
    </item>
    
    <item>
      <title>An Example of Using RabbitMQ From Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-19-an-example-of-using-rabbitmq-from-go/</link>
      <pubDate>Sat, 19 Jan 2019 07:42:05 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-19-an-example-of-using-rabbitmq-from-go/</guid>
      <description>Sending We&amp;rsquo;ll call our message publisher (sender) send.go and our message consumer (receiver) receive.go. The publisher will connect to RabbitMQ, send a single message, then exit.
package main import ( &amp;quot;log&amp;quot; &amp;quot;github.com/streadway/amqp&amp;quot; ) func failOnError(err error, msg string) { if err != nil { log.Fatalf(&amp;quot;%s: %s&amp;quot;, msg, err) } } func main() { conn, err := amqp.Dial(&amp;quot;amqp://guest:guest@localhost:5672/&amp;quot;) failOnError(err, &amp;quot;Failed to connect to RabbitMQ&amp;quot;) defer conn.Close() ch, err := conn.Channel() failOnError(err, &amp;quot;Failed to open a channel&amp;quot;) defer ch.</description>
    </item>
    
    <item>
      <title>CQRS</title>
      <link>https://www.maxlivinci.com/old/2019-01-19-cqrs/</link>
      <pubDate>Sat, 19 Jan 2019 07:00:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-19-cqrs/</guid>
      <description>Introducing Command Query Responsibility Segregation CQRS is a fancy pattern name that means decoupling the input and the output of your system.</description>
    </item>
    
    <item>
      <title>Building an API server with Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-15-building-an-api-server-with-go/</link>
      <pubDate>Tue, 15 Jan 2019 19:41:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-15-building-an-api-server-with-go/</guid>
      <description>File Structures main.go service/ handlers_test.go handlers.go server.go middleware.go types.go  Libraries introduction  gorilla/mux -&amp;gt; A powerful URL router and dispatcher for golang unrolled/render -&amp;gt; Go package for easily rendering JSON responses. codegangsta/negroni -&amp;gt; Idiomatic HTTP Middleware for Golang  Install Dependencies go get github.com/urfave/negroni go get github.com/gorilla/mux go get github.com/unrolled/render  Create our types In service folder create types.go
package service type fulfillmentStatus struct { SKU string `json:&amp;quot;sku&amp;quot;` ShipsWithin int `json:&amp;quot;ships_within&amp;quot;` QuantityInStock int `json:&amp;quot;qty_in_stock&amp;quot;` }  TDD In service folder create handlers_test.</description>
    </item>
    
    <item>
      <title>Event-Driven Architecture</title>
      <link>https://www.maxlivinci.com/old/2019-01-13-event-driven-architecture/</link>
      <pubDate>Sun, 13 Jan 2019 13:44:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-13-event-driven-architecture/</guid>
      <description>Asynchronous processing With asynchronous processing, all the communication to the downstream application happens out of process leveraging a queue or a message broker as an intermediary.</description>
    </item>
    
    <item>
      <title>Service discovery</title>
      <link>https://www.maxlivinci.com/old/2019-01-13-service-discovery/</link>
      <pubDate>Sun, 13 Jan 2019 10:19:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-13-service-discovery/</guid>
      <description> Server-side service discovery Client-side discovery </description>
    </item>
    
    <item>
      <title>URI path design for REST services</title>
      <link>https://www.maxlivinci.com/old/2019-01-12-uri-path-design-for-rest-services/</link>
      <pubDate>Sat, 12 Jan 2019 19:37:17 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-12-uri-path-design-for-rest-services/</guid>
      <description>Collections A collection is a directory of resources typically broken by parameters to access an individual document. For example:
GET /cats -&amp;gt; All cats in the collection GET /cats/1 -&amp;gt; Single document for a cat 1  When defining a collection, we should always use a plural noun such as cats or people for the collection name.
Documents A document is a resource pointing to a single object, similar to a row in a database.</description>
    </item>
    
    <item>
      <title>Serving Static Files In Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-12-servering-static-files/</link>
      <pubDate>Sat, 12 Jan 2019 17:15:17 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-12-servering-static-files/</guid>
      <description>func main() { port := 8080 cathandler := http.FileServer(http.Dir(&amp;quot;./images&amp;quot;)) // images/... http.Handle(&amp;quot;/cat/&amp;quot;, http.StripPrefix(&amp;quot;/cat/&amp;quot;, cathandler)) // images/cat/... http.Handle(&amp;quot;/cat/&amp;quot;, cathandler) log.Printf(&amp;quot;Server starting on port %v\n&amp;quot;, 8080) log.Fatal(http.ListenAndServe(fmt.Sprintf(&amp;quot;:%v&amp;quot;, port), nil)) }  </description>
    </item>
    
    <item>
      <title>Reading and writing JSON</title>
      <link>https://www.maxlivinci.com/old/2019-01-12-reading-and-writing-json/</link>
      <pubDate>Sat, 12 Jan 2019 15:43:17 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-12-reading-and-writing-json/</guid>
      <description>Writing JSON func main() { port := 8080 http.HandleFunc(&amp;quot;/&amp;quot;, helloWorldHandler) log.Printf(&amp;quot;Server starting on port %v\n&amp;quot;, 8080) log.Fatal(http.ListenAndServe(fmt.Sprintf(&amp;quot;:%v&amp;quot;, port), nil)) } type HelloWorldResponse struct { // change the output field to be &amp;quot;message&amp;quot; Message string `json:&amp;quot;message&amp;quot;` // do not output this field Author string `json:&amp;quot;-&amp;quot;` // do not output the field if the value is empty Date string `json:&amp;quot;,omitempty&amp;quot;` // convert output to a string and rename &amp;quot;id&amp;quot; Id int `json:&amp;quot;id, string&amp;quot;` } func helloWorldHandler(w http.</description>
    </item>
    
    <item>
      <title>Panic and Recover in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-19-panic-and-recover-in-go/</link>
      <pubDate>Sat, 12 Jan 2019 14:16:34 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-19-panic-and-recover-in-go/</guid>
      <description>Strictly speaking, panic() is a built-in Go function that terminates the current flow of a Go program and starts panicking!
On the other hand, the recover() function, which is also a built-in Go function, allows you to take back the control of a goroutine that just panicked using panic().
package main import ( &amp;quot;fmt&amp;quot; ) func a() { fmt.Println(&amp;quot;Inside a()&amp;quot;) defer func() { if c := recover(); c != nil { fmt.</description>
    </item>
    
    <item>
      <title>An Example of Using Nsq From Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-11-an-example-of-using-nsq-from-go/</link>
      <pubDate>Fri, 11 Jan 2019 10:27:05 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-11-an-example-of-using-nsq-from-go/</guid>
      <description>NSQ is a message queue, similar to RabbitMQ. I decided I’d give it a whirl.
Install Nsq brew install nsq  Launch Nsq nsqlookupd &amp;amp; nsqd --lookupd-tcp-address=127.0.0.1:4160 &amp;amp; nsqadmin --lookupd-http-address=127.0.0.1:4161 &amp;amp;  Get Go client library go get github.com/nsqio/go-nsq  Create a producer package main import ( &amp;quot;log&amp;quot; &amp;quot;github.com/bitly/go-nsq&amp;quot; ) func main() { config := nsq.NewConfig() w, _ := nsq.NewProducer(&amp;quot;127.0.0.1:4150&amp;quot;, config) err := w.Publish(&amp;quot;write_test&amp;quot;, []byte(&amp;quot;test&amp;quot;)) if err != nil { log.</description>
    </item>
    
  </channel>
</rss>