<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Blogs on YING ZHEN LI</title>
        <link>https://www.maxlivinci.com/blog/</link>
        <description>Recent content in Blogs on YING ZHEN LI</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 01 Jun 2019 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://www.maxlivinci.com/blog/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>LeetCode - Merge Two Sorted Lists</title>
            <link>https://www.maxlivinci.com/blog/2019-06-01-leetcode-merge-two-sorted-lists/</link>
            <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-06-01-leetcode-merge-two-sorted-lists/</guid>
            <description>LeetCode
Problem Statement Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.
Example
 Input: 1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4
Output: 1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4
 Solution /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode { // Check boundary condition if l1 == nil { return l2 } if l2 == nil { return l1 } // Create dummy node dummy := ListNode{} head := &amp;amp;dummy // Connect l1 and l2 for l1 !</description>
            <content type="html"><![CDATA[

<p><a href="https://leetcode.com/problems/merge-two-sorted-lists/">LeetCode</a></p>

<h2 id="problem-statement">Problem Statement</h2>

<p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>

<p><em>Example</em></p>

<blockquote>
<p>Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</p>

<p>Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p>
</blockquote>

<h2 id="solution">Solution</h2>

<pre><code class="language-go">/**
 * Definition for singly-linked list.
 * type ListNode struct {
 *     Val int
 *     Next *ListNode
 * }
 */
func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {
	// Check boundary condition
	if l1 == nil {
		return l2
	}
	if l2 == nil {
		return l1
	}

	// Create dummy node
	dummy := ListNode{}
	head := &amp;dummy

	// Connect l1 and l2
	for l1 != nil &amp;&amp; l2 != nil {
		if l1.Val &lt; l2.Val {
			head.Next = l1
			l1 = l1.Next
		} else {
			head.Next = l2
			l2 = l2.Next
		}
		head = head.Next
	}

	// Check leftover
	if l1 != nil {
		head.Next = l1
	}
	if l2 != nil {
		head.Next = l2
	}

	return dummy.Next
}
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>LeetCode - Rotate Array</title>
            <link>https://www.maxlivinci.com/blog/2019-05-31-leetcode-rotate-array/</link>
            <pubDate>Fri, 31 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-31-leetcode-rotate-array/</guid>
            <description>LeetCode
Problem Statement Given an array, rotate the array to the right by k steps, where k is non-negative.
Example 1
 Input: [1,2,3,4,5,6,7] and k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
 Example 2
 Input: [-1,-100,3,99] and k = 2
Output: [3,99,-1,-100]
Explanation:
rotate 1 steps to the right: [99,-1,-100,3]</description>
            <content type="html"><![CDATA[

<p><a href="https://leetcode.com/problems/rotate-array/">LeetCode</a></p>

<h2 id="problem-statement">Problem Statement</h2>

<p>Given an array, rotate the array to the right by k steps, where k is non-negative.</p>

<p><em>Example 1</em></p>

<blockquote>
<p>Input: [1,2,3,4,5,6,7] and k = 3</p>

<p>Output: [5,6,7,1,2,3,4]</p>

<p>Explanation:</p>

<p>rotate 1 steps to the right: [7,1,2,3,4,5,6]</p>

<p>rotate 2 steps to the right: [6,7,1,2,3,4,5]</p>

<p>rotate 3 steps to the right: [5,6,7,1,2,3,4]</p>
</blockquote>

<p><em>Example 2</em></p>

<blockquote>
<p>Input: [-1,-100,3,99] and k = 2</p>

<p>Output: [3,99,-1,-100]</p>

<p>Explanation:</p>

<p>rotate 1 steps to the right: [99,-1,-100,3]</p>

<p>rotate 2 steps to the right: [3,99,-1,-100]</p>
</blockquote>

<h2 id="solution">Solution</h2>

<pre><code class="language-go">func rotate(nums []int, k int) {
	n := len(nums)

	k = k % n

	reverse(nums, 0, n-1)
	reverse(nums, 0, k-1)
	reverse(nums, k, n-1)
}

func reverse(nums []int, i int, j int) {
	for i &lt; j {
		nums[i], nums[j] = nums[j], nums[i]
		i++
		j--
	}
}
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>LeetCode - Remove Duplicates from Sorted Array</title>
            <link>https://www.maxlivinci.com/blog/2019-05-30-leetcode-remove-duplicates-from-sorted-array/</link>
            <pubDate>Thu, 30 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-30-leetcode-remove-duplicates-from-sorted-array/</guid>
            <description>LeetCode
Problem Statement Given a sorted array of numbers, remove the duplicates in-place such that each element appear only once and return the new length.
Example 1
 Given nums = [1,1,2],
Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.
It doesn’t matter what you leave beyond the returned length.
 Example 2
 Given nums = [0,0,1,1,1,2,2,3,3,4],</description>
            <content type="html"><![CDATA[

<p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/">LeetCode</a></p>

<h2 id="problem-statement">Problem Statement</h2>

<p>Given a sorted array of numbers, remove the duplicates in-place such that each element appear only once and return the new length.</p>

<p><em>Example 1</em></p>

<blockquote>
<p>Given nums = [1,1,2],</p>

<p>Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.</p>

<p>It doesn’t matter what you leave beyond the returned length.</p>
</blockquote>

<p><em>Example 2</em></p>

<blockquote>
<p>Given nums = [0,0,1,1,1,2,2,3,3,4],</p>

<p>Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.</p>

<p>It doesn’t matter what values are set beyond the returned length.</p>
</blockquote>

<h2 id="solution">Solution</h2>

<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
)

func removeDuplicates(nums []int) int {
	replaceIndex := 1

	for curr := 1; curr &lt; len(nums); curr++ {
		if nums[curr] != nums[curr-1] {
			nums[replaceIndex] = nums[curr]
			replaceIndex++
		}
	}

	fmt.Printf(&quot;%v&quot;, nums)

	return replaceIndex
}

func main() {
	removeDuplicates([]int{1, 2, 3, 3, 3, 3, 3, 4})
}
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>How to end a goroutine</title>
            <link>https://www.maxlivinci.com/blog/2019-05-24-how-to-end-a-goroutine/</link>
            <pubDate>Fri, 24 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-24-how-to-end-a-goroutine/</guid>
            <description>1. Stop Channel package main import ( &amp;quot;fmt&amp;quot; &amp;quot;time&amp;quot; ) func main() { ch := make(chan int) done := make(chan struct{}) go func() { i := 0 for { select { case ch &amp;lt;- i: i++ case &amp;lt;-done: close(ch) return } time.Sleep(100 * time.Millisecond) } }() go func() { time.Sleep(3 * time.Second) done &amp;lt;- struct{}{} }() for i := range ch { fmt.Println(&amp;quot;receive value: &amp;quot;, i) } fmt.Println(&amp;quot;finish&amp;quot;) }  2.</description>
            <content type="html"><![CDATA[

<h2 id="1-stop-channel">1. Stop Channel</h2>

<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;time&quot;
)

func main() {
	ch := make(chan int)
	done := make(chan struct{})

	go func() {
		i := 0
		for {
			select {
			case ch &lt;- i:
				i++
			case &lt;-done:
				close(ch)
				return
			}
			time.Sleep(100 * time.Millisecond)
		}
	}()

	go func() {
		time.Sleep(3 * time.Second)
		done &lt;- struct{}{}
	}()

	for i := range ch {
		fmt.Println(&quot;receive value: &quot;, i)
	}

	fmt.Println(&quot;finish&quot;)
}
</code></pre>

<h2 id="2-signal-channel">2. Signal Channel</h2>

<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;os&quot;
	&quot;os/signal&quot;
	&quot;syscall&quot;
	&quot;time&quot;
)

func main() {
	ch := make(chan int)
	done := make(chan os.Signal, 2)
	signal.Notify(done, os.Interrupt, syscall.SIGTERM)

	go func() {
		i := 0
		for {
			select {
			case ch &lt;- i:
				i++
			case &lt;-done:
				close(ch)
				return
			}
			time.Sleep(100 * time.Millisecond)
		}
	}()

	for i := range ch {
		fmt.Println(&quot;receive value: &quot;, i)
	}

	fmt.Println(&quot;finish&quot;)
}
</code></pre>

<h2 id="3-close-the-channel">3. Close the channel</h2>

<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;time&quot;
)

func main() {
	ch := make(chan int)

	go func() {
		i := 0
		for {
			select {
			case ch &lt;- i:
				i++
			case &lt;-ch:
				return
			}
			time.Sleep(100 * time.Millisecond)
		}
	}()

	go func() {
		time.Sleep(3 * time.Second)
		close(ch)
	}()

	for i := range ch {
		fmt.Println(&quot;receive value: &quot;, i)
	}

	fmt.Println(&quot;finish&quot;)
}
</code></pre>

<h2 id="4-context">4. Context</h2>

<pre><code class="language-go">package main

import (
	&quot;context&quot;
	&quot;fmt&quot;
	&quot;time&quot;
)

func main() {
	ch := make(chan int)
	ctx, cancel := context.WithCancel(context.Background())

	go func(ctx context.Context) {
		i := 0
		for {
			select {
			case ch &lt;- i:
				i++
			case &lt;-ctx.Done():
				close(ch)
				return
			}
			time.Sleep(100 * time.Millisecond)
		}
	}(ctx)

	go func() {
		time.Sleep(3 * time.Second)
		cancel()
	}()

	for i := range ch {
		fmt.Println(&quot;receive value: &quot;, i)
	}

	fmt.Println(&quot;finish&quot;)
}
</code></pre>

<h2 id="5-time-after">5. Time.After</h2>

<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;time&quot;
)

func main() {
	ch := make(chan int)
	timeout := time.After(3 * time.Second)

	go func(t &lt;-chan time.Time) {
		i := 0
		for {
			select {
			case ch &lt;- i:
				i++
			case &lt;-t:
				close(ch)
				return
			}
			time.Sleep(100 * time.Millisecond)
		}
	}(timeout)

	for i := range ch {
		fmt.Println(&quot;receive value: &quot;, i)
	}

	fmt.Println(&quot;finish&quot;)
}
</code></pre>

<h2 id="6-atmoic">6. Atmoic</h2>

<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;sync/atomic&quot;
	&quot;time&quot;
)

func main() {
	ch := make(chan int)
	var v atomic.Value

	go func() {
		i := 0
		for {
			select {
			case ch &lt;- i:
				if v.Load().(bool) {
					close(ch)
				} else {
					i++
				}
			}
			time.Sleep(100 * time.Millisecond)
		}
	}()

	go func() {
		v.Store(false)
		time.Sleep(3 * time.Second)
		v.Store(true)
	}()

	for i := range ch {
		fmt.Println(&quot;receive value: &quot;, i)
	}

	fmt.Println(&quot;finish&quot;)
}
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Types in Go</title>
            <link>https://www.maxlivinci.com/blog/2019-05-22-types-in-go/</link>
            <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-22-types-in-go/</guid>
            <description>Terminology  Pre-Declared Type Composite Type (Type Literal) Named Type Unnamed Types Underlying Type Assignability Type Conversions Untyped constants Default Type  Pre-Declared Type Part of Named Type.
String Integer Boolean  Composite Type (Type Literal) Part of Unnamed Types.
Array Slice Map Struct  Named Type Named types can have their own method sets.
  Unnamed Types  Underlying Type Every type do have an underlying type. Pre-declared types and Composite Type refers to itself as the underlying type.</description>
            <content type="html"><![CDATA[

<h2 id="terminology">Terminology</h2>

<ol>
<li>Pre-Declared Type</li>
<li>Composite Type (Type Literal)</li>
<li>Named Type</li>
<li>Unnamed Types</li>
<li>Underlying Type</li>
<li>Assignability</li>
<li>Type Conversions</li>
<li>Untyped constants</li>
<li>Default Type</li>
</ol>

<h2 id="pre-declared-type">Pre-Declared Type</h2>

<p>Part of <code>Named Type</code>.</p>

<pre><code>String
Integer
Boolean
</code></pre>

<h2 id="composite-type-type-literal">Composite Type (Type Literal)</h2>

<p>Part of <code>Unnamed Types</code>.</p>

<pre><code>Array
Slice
Map
Struct
</code></pre>

<h2 id="named-type">Named Type</h2>

<p><code>Named types</code> can have their own method sets.</p>

<pre><code>
</code></pre>

<h2 id="unnamed-types">Unnamed Types</h2>

<pre><code></code></pre>

<h2 id="underlying-type">Underlying Type</h2>

<p>Every type do have an underlying type. <code>Pre-declared types</code> and <code>Composite Type</code> refers to itself as the underlying type.</p>

<pre><code></code></pre>

<h2 id="assignability">Assignability</h2>

<p>It is also possible to assign a value to a variable if their <code>underlying types</code> are identical and one of them is an <code>unnamed type</code>.</p>

<pre><code class="language-go">func main() {
	type S []int
	type S2 []int

	var a S = []int{1}
	// var b S2 = a &lt;------- error
	var b S2 = S2(a)

	fmt.Printf(&quot;%v&quot;, a, b)

	// a        -&gt;   name type, type     S, underlying type: []int
    // b        -&gt;   name type, type    S2, underlying type: []int
    // []int{1} -&gt; unname type, type []int, underlying type: []int
}
</code></pre>

<h2 id="type-conversions">Type Conversions</h2>

<pre><code></code></pre>

<h2 id="untyped-constants">Untyped constants</h2>

<p>For <code>Numbers</code> -&gt; Untyped constants they can be assigned to a variable of any integer type.</p>

<pre><code class="language-go">func main() {
	const a = 2 // Untyped constants

    var b float32 = a
	var c complex64 = a
	var d uintptr = a
	var e byte = a

	fmt.Println(b, c, d, e)
}
</code></pre>

<h2 id="default-type">Default Type</h2>

<pre><code class="language-go"></code></pre>
]]></content>
        </item>
        
        <item>
            <title>Factory patterns in Go</title>
            <link>https://www.maxlivinci.com/blog/2019-05-17-factory-patterns-in-go/</link>
            <pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-17-factory-patterns-in-go/</guid>
            <description>The factory pattern is a commonly used pattern in object oriented programming. In Go, there are many different ways in which you can use the factory pattern to make your code cleaner and more concise.
Go’s answer to classes, are structs. For example, the struct for a “Person”, along with a “Greet” method would look like this:
type Greeter interface { Greet() } type Person struct { Name string Age int } func (p Person) Greet() { fmt.</description>
            <content type="html"><![CDATA[

<p>The factory pattern is a commonly used pattern in object oriented programming. In Go, there are many different ways in which you can use the factory pattern to make your code cleaner and more concise.</p>

<p>Go’s answer to classes, are structs. For example, the struct for a “Person”, along with a “Greet” method would look like this:</p>

<pre><code class="language-go">type Greeter interface {
  Greet()
}

type Person struct {
  Name string
  Age int
}

func (p Person) Greet() {
  fmt.Printf(&quot;Hi! My name is %s&quot;, p.Name)
}
</code></pre>

<p>We can now make use of factory functions to create new instances of Person</p>

<h2 id="simple-factory">Simple factory</h2>

<p>The simplest, and most commonly used factory is a function that takes in some arguments, and returns an instance of <code>Person</code>:</p>

<pre><code class="language-go">func NewPerson(name string, age int) Person {
  return Person{
    Name: name,
    Age: age
  }
}
</code></pre>

<p>We can also return pointers to the <code>Person</code> instance instead:</p>

<pre><code class="language-go">func NewPerson(name string, age int) *Person {
  return &amp;Person{
    Name: name,
    Age: age
  }
}
</code></pre>

<p>Factory functions are a better alternative to initializing instances using something like <code>p := &amp;Person{}</code> because, the function signature ensures that everyone will supply the required attributes. For example, one can easily forget to initialize the <code>Age</code> attribute when using struct initialization. The function signature of <code>NewPerson(name string, age int)</code> ensures that both the name and age are supplied in order to construct a new instance of <code>Person</code></p>

<blockquote>
<p>👉 Use factory functions to ensure that new instances structs are constructed with the required arguments</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>Go Rune</title>
            <link>https://www.maxlivinci.com/blog/2019-05-16-go-rune/</link>
            <pubDate>Thu, 16 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-16-go-rune/</guid>
            <description>package main import &amp;quot;fmt&amp;quot; func main() { var chinese = &amp;quot;人工智能&amp;quot; fmt.Println(&amp;quot;chinese length&amp;quot;, len(chinese)) fmt.Println(&amp;quot;chinese word length&amp;quot;, len([]rune(chinese))) fmt.Println(&amp;quot;chinese word length&amp;quot;, utf8.RuneCountInString(chinese)) for i, ch := range chinese { fmt.Printf(&amp;quot;(%d, %c)&amp;quot;, i, ch) // (0, 人)(3, 工)(6, 智)(9, 能) } fmt.Println() for i, ch := range []rune(chinese) { fmt.Printf(&amp;quot;(%d, %c)&amp;quot;, i, ch) // (0, 人)(1, 工)(2, 智)(3, 能) } fmt.Println() }  # chinses is 3 bytes chinese length 12 chinese word length 4 chinese word length 4 (0, 人)(3, 工)(6, 智)(9, 能) (0, 人)(1, 工)(2, 智)(3, 能)  </description>
            <content type="html"><![CDATA[<pre><code class="language-go">package main

import &quot;fmt&quot;

func main() {
	var chinese = &quot;人工智能&quot;
	fmt.Println(&quot;chinese length&quot;, len(chinese))
	fmt.Println(&quot;chinese word length&quot;, len([]rune(chinese)))
	fmt.Println(&quot;chinese word length&quot;, utf8.RuneCountInString(chinese))

	for i, ch := range chinese {
		fmt.Printf(&quot;(%d, %c)&quot;, i, ch) // (0, 人)(3, 工)(6, 智)(9, 能)
	}

	fmt.Println()

	for i, ch := range []rune(chinese) {
		fmt.Printf(&quot;(%d, %c)&quot;, i, ch) // (0, 人)(1, 工)(2, 智)(3, 能)
	}

	fmt.Println()
}
</code></pre>

<pre><code class="language-bash"># chinses is 3 bytes
chinese length 12
chinese word length 4
chinese word length 4
(0, 人)(3, 工)(6, 智)(9, 能)
(0, 人)(1, 工)(2, 智)(3, 能)
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Docker Cheat Sheet</title>
            <link>https://www.maxlivinci.com/blog/2019-05-14-docker-cheat-sheet/</link>
            <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-14-docker-cheat-sheet/</guid>
            <description>Docker Container List all containers
docker ps -a # include stopped -q # only returns the container IDs  Run a shell inside an existing container
docker exec -it # connect the container to terminal &amp;lt;container&amp;gt; &amp;lt;command&amp;gt; # bin/sh, bin/bash  Starting a stopped container
docker start &amp;lt;container&amp;gt;  Print a container’s logs docker logs -f # tail -t # timestamps &amp;lt;container&amp;gt;  Restarting a stopped container
docker restart &amp;lt;container&amp;gt;  Getting additional information about a container</description>
            <content type="html"><![CDATA[

<h2 id="docker-container">Docker Container</h2>

<p><strong>List all containers</strong></p>

<pre><code class="language-bash">docker ps
  -a      # include stopped
  -q      # only returns the container IDs
</code></pre>

<p><strong>Run a shell inside an existing container</strong></p>

<pre><code class="language-bash">docker exec
  -it         # connect the container to terminal
  &lt;container&gt;
  &lt;command&gt;   # bin/sh, bin/bash
</code></pre>

<p><strong>Starting a stopped container</strong></p>

<pre><code class="language-bash">docker start &lt;container&gt;
</code></pre>

<h1 id="print-a-container-s-logs">Print a container’s logs</h1>

<pre><code class="language-bash">docker logs
  -f               # tail
  -t               # timestamps
  &lt;container&gt;
</code></pre>

<p><strong>Restarting a stopped container</strong></p>

<pre><code class="language-bash">docker restart &lt;container&gt;
</code></pre>

<p><strong>Getting additional information about a container</strong></p>

<pre><code class="language-bash">docker inspect
  -f '{{ .NetworkSettings.IPAddress }}'   # selectively query.
  &lt;container&gt;
</code></pre>

<p><strong>Stop the running Docker container</strong></p>

<pre><code class="language-bash">docker stop &lt;container&gt;
</code></pre>

<p><strong>Remove exited containers</strong></p>

<pre><code class="language-bash">docker rm -f $(docker container ls -f &quot;status=exited&quot; -q)
</code></pre>

<p><strong>Remove all containers</strong></p>

<pre><code class="language-bash">docker rm -f $(docker ps -aq)
</code></pre>

<p><strong>Show the history of an image</strong></p>

<pre><code class="language-bash">docker history &lt;container-id&gt;
</code></pre>

<p><strong>Stop a running container through SIGKILL</strong></p>

<pre><code class="language-bash">docker kill web
</code></pre>

<h2 id="docker-image">Docker Image</h2>

<p><strong>Build a image</strong></p>

<pre><code class="language-bash">docker build
  -t &lt;image-name&gt;:&lt;tag&gt; # name docker image
  --no-cache            # do not use cache
  .
</code></pre>

<p><strong>Run an image</strong></p>

<pre><code class="language-bash">docker run
  -v &lt;source&gt;:&lt;destination&gt; # create a volume in our container from a directory on the host
  --net=&lt;NETWORK&gt;           # Creating a container inside a Docker network
  --volumes-from            #
  -it                       # connect the container to terminal
  --name &lt;name&gt;             # name the containe
  -e NAME=Sam               # environment variable
  -p 5000:80                # expose port 5000 externally and map to port 80
  -d                        # run in the background
  --rm                      # remove container automatically after it exits
  --restart=always          #
  --link &lt;container-name&gt;   #
  &lt;image&gt;:&lt;tag&gt;
</code></pre>

<p><strong>Debug an image</strong></p>

<pre><code class="language-bash">docker run -it &lt;image&gt; /bin/bash
</code></pre>

<p><strong>List images</strong></p>

<pre><code class="language-bash">docker images ls
</code></pre>

<p><strong>Remove an image</strong></p>

<pre><code class="language-bash">docker rmi &lt;image-name&gt;
</code></pre>

<p><strong>Remove all images</strong></p>

<pre><code class="language-bash">sudo docker rmi `docker images -a -q`
</code></pre>

<p><strong>Pulling a image</strong></p>

<pre><code class="language-bash">docker pull &lt;dockerhub-id&gt;/&lt;image-name&gt;:&lt;version&gt;
</code></pre>

<p><strong>Pushing a image to DockerHub</strong></p>

<pre><code class="language-bash">docker push &lt;dockerhub-id&gt;/&lt;image-name&gt;:&lt;version&gt;
</code></pre>

<h2 id="docker-network">Docker Network</h2>

<p><strong>List the networks</strong></p>

<pre><code class="language-bash">docker network ls
</code></pre>

<p><strong>Creating a Docker network</strong></p>

<pre><code class="language-bash">docker network create
  -d &lt;driver&gt;         #
  &lt;newwork&gt;
</code></pre>

<p><strong>Inspect the network</strong></p>

<pre><code class="language-bash">docker network inspect &lt;newwork&gt;
</code></pre>

<p><strong>Adding a new container to the network</strong></p>

<pre><code class="language-bash">docker network connect &lt;newwork&gt; &lt;container&gt;
</code></pre>

<p><strong>Disconnecting a host from a network</strong></p>

<pre><code class="language-bash">docker network disconnect &lt;newwork&gt; &lt;container&gt;
</code></pre>

<h2 id="docker-volume">Docker Volume</h2>

<p><strong>List volumes</strong></p>

<pre><code class="language-bash">docker volume ls
</code></pre>

<p><strong>Remove volume</strong></p>

<pre><code>docker volume rm &lt;volume&gt;
</code></pre>

<p><strong>Volumes Detail</strong></p>

<pre><code class="language-bash">docker volume inspect &lt;volume&gt;
</code></pre>

<p><strong>Remove unused volumes using docker volume prune</strong></p>

<pre><code class="language-bash">docker volume prune
</code></pre>

<h2 id="dockerfile">Dockerfile</h2>

<pre><code class="language-yaml"># Sets the Base Image for subsequent instructions.
FROM

# Apply key/value metadata to your images, containers, or daemons.
LABEL key=&quot;value&quot;

# Sets environment variable.
ENV KEY VALUE

# Cxecute any commands in a new layer on top of the current image and commit the results.
RUN

# The WORKDIR instruction provides a way to set the working directory for the container and
# the ENTRYPOINT and/or CMD to be executed when a container is launched from the image.
WORKDIR

# Use COPY unless you sure you need ADD
# The key difference is that the COPY instruction is purely focused on copying local files from the build context and does not have any extraction or decompression capabilities.
COPY

ADD

# Creates a mount point for externally mounted volumes or other containers.
VOLUME [&quot;/opt/project&quot;]

# The ARG instruction defines variables that can be passed at build-time via the docker build command.
ARG webapp_user=user

# Configures a container that will run as an executable.
EXPOSE 80

# Any arguments we specify on the docker run command line will
# be passed as arguments to the command specified in the ENTRYPOINT.
ENTRYPOINT [&quot;/usr/sbin/nginx&quot;]

# The CMD instruction specifies the command to run when a container is launched.
# We can override the CMD instruction on the docker run command line.
CMD [&quot;-h&quot;]
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Docker Compose Cheat Sheet</title>
            <link>https://www.maxlivinci.com/blog/2019-05-14-docker-compose-cheat-sheet/</link>
            <pubDate>Tue, 14 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-14-docker-compose-cheat-sheet/</guid>
            <description>docker-compose.yml version: &amp;quot;3&amp;quot; services: voting-app: build: ./voting-app/. # bind mount volumes: - ./voting-app:/app ports: - &amp;quot;5000:80&amp;quot; links: - redis networks: - front-tier - back-tier result-app: build: ./result-app/. # bind mount volumes: - ./result-app:/app ports: - &amp;quot;5001:80&amp;quot; links: - db networks: - front-tier - back-tier worker: build: ./worker links: - db - redis networks: - back-tier redis: image: redis ports: [&amp;quot;6379&amp;quot;] networks: - back-tier db: image: postgres:9.4 # docker volume volumes: - &amp;quot;db-data:/var/lib/postgresql/data&amp;quot; networks: - back-tier volumes: db-data: networks: front-tier: driver: bridge back-tier: driver: bridge  Commands docker-compose -f &amp;lt;docker-compose.</description>
            <content type="html"><![CDATA[

<h2 id="docker-compose-yml">docker-compose.yml</h2>

<pre><code class="language-yaml">version: &quot;3&quot;

services:
  voting-app:
    build: ./voting-app/.
    # bind mount
    volumes:
     - ./voting-app:/app
    ports:
      - &quot;5000:80&quot;
    links:
      - redis
    networks:
      - front-tier
      - back-tier

  result-app:
    build: ./result-app/.
    # bind mount
    volumes:
      - ./result-app:/app
    ports:
      - &quot;5001:80&quot;
    links:
      - db
    networks:
      - front-tier
      - back-tier

  worker:
    build: ./worker
    links:
      - db
      - redis
    networks:
      - back-tier

  redis:
    image: redis
    ports: [&quot;6379&quot;]
    networks:
      - back-tier

  db:
    image: postgres:9.4
    # docker volume
    volumes:
      - &quot;db-data:/var/lib/postgresql/data&quot;
    networks:
      - back-tier

volumes:
  db-data:

networks:
  front-tier:
    driver: bridge
  back-tier:
    driver: bridge
</code></pre>

<p><img src="https://user-images.githubusercontent.com/11765228/57179986-12b37500-6e84-11e9-834b-6aa59a6664e5.png" alt="Screen Shot 2019-05-04 at 15 48 19" /></p>

<h2 id="commands">Commands</h2>

<pre><code class="language-bash">docker-compose
  -f &lt;docker-compose.yaml&gt;  # apply docker-compose file
  up
  -d                        # run in the background
# Build images.
docker-compose build
# Lists all of the currently running services.
docker-compose ps
# Show log events.
docker-compose logs
# Stop running services.
docker-compose stop
# Stops containers and removes containers, networks, volumes, and images created by up.
docker-compose down
# List images used by the created containers.
docker-compose images
# Run arbitrary commands in your services.
docker-compose exec &lt;service&gt; bash
# Force kill the services.
docker- compose kill
# Restart services.
docker-compose start
# Remove services.
docker-compose rm
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Atomic Counters</title>
            <link>https://www.maxlivinci.com/blog/2019-05-12-atomic-counters/</link>
            <pubDate>Sun, 12 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-12-atomic-counters/</guid>
            <description>Program with the the race condition package main import ( &amp;quot;fmt&amp;quot; &amp;quot;time&amp;quot; ) func main() { var ops uint64 for i := 0; i &amp;lt; 10000; i++ { go func() { ops = ops + 1 }() } time.Sleep(time.Second) fmt.Println(&amp;quot;ops:&amp;quot;, ops) }  ops: 9742  Solving the race condition using Mutex package main import ( &amp;quot;fmt&amp;quot; &amp;quot;sync&amp;quot; &amp;quot;time&amp;quot; ) func main() { var ops uint64 var m sync.Mutex for i := 0; i &amp;lt; 10000; i++ { go func() { m.</description>
            <content type="html"><![CDATA[

<h2 id="program-with-the-the-race-condition">Program with the the race condition</h2>

<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;time&quot;
)

func main() {
	var ops uint64

	for i := 0; i &lt; 10000; i++ {
		go func() {
			ops = ops + 1
		}()
	}

	time.Sleep(time.Second)
	fmt.Println(&quot;ops:&quot;, ops)
}
</code></pre>

<pre><code>ops: 9742
</code></pre>

<h2 id="solving-the-race-condition-using-mutex">Solving the race condition using Mutex</h2>

<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;sync&quot;
	&quot;time&quot;
)

func main() {
	var ops uint64
	var m sync.Mutex

	for i := 0; i &lt; 10000; i++ {
		go func() {
			m.Lock()
			defer m.Unlock()
			ops = ops + 10
		}()
	}

	time.Sleep(time.Second)
	fmt.Println(&quot;ops:&quot;, ops)
}
</code></pre>

<pre><code>ops: 10000
</code></pre>

<h2 id="solving-the-race-condition-using-a-buffered-channel">Solving the race condition using a buffered channel</h2>

<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;time&quot;
)

func main() {
	var ops uint64
	ch := make(chan bool, 1)

	for i := 0; i &lt; 10000; i++ {
		go func() {
			ch &lt;- true
			ops = ops + 1
			&lt;-ch
		}()
	}

	time.Sleep(time.Second)
	fmt.Println(&quot;ops:&quot;, ops)
}
</code></pre>

<pre><code>ops: 10000
</code></pre>

<h2 id="solving-the-race-condition-using-atomic">Solving the race condition using Atomic</h2>

<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;sync/atomic&quot;
	&quot;time&quot;
)

func main() {
	var ops uint64

	for i := 0; i &lt; 10000; i++ {
		go func() {
			atomic.AddUint64(&amp;ops, 1)
		}()
	}

	time.Sleep(time.Second)
	opsFinal := atomic.LoadUint64(&amp;ops)
	fmt.Println(&quot;ops:&quot;, opsFinal)
}
</code></pre>

<pre><code>ops: 10000
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Build a Web Crawler in Go</title>
            <link>https://www.maxlivinci.com/blog/2019-05-11-build-a-web-crawler-in-go/</link>
            <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-11-build-a-web-crawler-in-go/</guid>
            <description>package main import ( &amp;quot;crypto/tls&amp;quot; &amp;quot;flag&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;net/url&amp;quot; &amp;quot;os&amp;quot; &amp;quot;github.com/jackdanger/collectlinks&amp;quot; ) var visited = make(map[string]bool) func main() { // Parses the command-line flags. flag.Parse() args := flag.Args() fmt.Println(args) if len(args) &amp;lt; 1 { fmt.Println(&amp;quot;Please specify start page&amp;quot;) os.Exit(1) } queue := make(chan string) go func() { queue &amp;lt;- args[0] }() for uri := range queue { enqueue(uri, queue) } } func enqueue(uri string, queue chan string) { fmt.Println(&amp;quot;fetching&amp;quot;, uri) visited[uri] = true transport := &amp;amp;http.</description>
            <content type="html"><![CDATA[<pre><code class="language-go">package main

import (
	&quot;crypto/tls&quot;
	&quot;flag&quot;
	&quot;fmt&quot;
	&quot;net/http&quot;
	&quot;net/url&quot;
	&quot;os&quot;

	&quot;github.com/jackdanger/collectlinks&quot;
)

var visited = make(map[string]bool)

func main() {
	// Parses the command-line flags.
	flag.Parse()

	args := flag.Args()
	fmt.Println(args)
	if len(args) &lt; 1 {
		fmt.Println(&quot;Please specify start page&quot;)
		os.Exit(1)
	}

	queue := make(chan string)

	go func() { queue &lt;- args[0] }()

	for uri := range queue {
		enqueue(uri, queue)
	}
}

func enqueue(uri string, queue chan string) {
	fmt.Println(&quot;fetching&quot;, uri)
	visited[uri] = true
	transport := &amp;http.Transport{
		TLSClientConfig: &amp;tls.Config{
			InsecureSkipVerify: true,
		},
	}
	client := http.Client{Transport: transport}
	resp, err := client.Get(uri)
	if err != nil {
		return
	}
	defer resp.Body.Close()

	links := collectlinks.All(resp.Body)

	for _, link := range links {
		absolute := fixUrl(link, uri)
		if uri != &quot;&quot; {
			if !visited[absolute] {
				go func() { queue &lt;- absolute }()
			}
		}
	}
}

func fixUrl(href, base string) string {
	uri, err := url.Parse(href)
	if err != nil {
		return &quot;&quot;
	}
	baseUrl, err := url.Parse(base)
	if err != nil {
		return &quot;&quot;
	}
	uri = baseUrl.ResolveReference(uri)
	return uri.String()
}
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Functional options</title>
            <link>https://www.maxlivinci.com/blog/2019-05-10-functional-options/</link>
            <pubDate>Fri, 10 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-10-functional-options/</guid>
            <description>Here&amp;rsquo;s the simplest example showing how to do functional options in Golang.
They&amp;rsquo;re a great way to enable users to set options and ease adding new options later.
package main import ( &amp;quot;flag&amp;quot; &amp;quot;fmt&amp;quot; ) // This is your function used by users to set options. func Host(host string) func(*Server) { return func(s *Server) { s.Host = host } } // This is another function used by users to set options.</description>
            <content type="html"><![CDATA[<p>Here&rsquo;s the simplest example showing how to do functional options in Golang.</p>

<p>They&rsquo;re a great way to enable users to set options and ease adding new options later.</p>

<pre><code class="language-go">package main

import (
	&quot;flag&quot;
	&quot;fmt&quot;
)

// This is your function used by users to set options.
func Host(host string) func(*Server) {
	return func(s *Server) {
		s.Host = host
	}
}

// This is another function used by users to set options.
func Port(port int) func(*Server) {
	return func(s *Server) {
		s.Port = port
	}
}

// This is the type whose options you're enabling users to set.
type Server struct {
	Host string
	Port int
}

// This is your creator function that accepts a list of option functions.
func NewServer(opts ...func(*Server)) *Server {
	s := &amp;Server{}

	// call option functions on instance to set options on it
	for _, opt := range opts {
		opt(s)
	}

	return s
}

func main() {
	var host = flag.String(&quot;host&quot;, &quot;127.0.0.1&quot;, &quot;host&quot;)
	var port = flag.Int(&quot;port&quot;, 8000, &quot;port&quot;)
	flag.Parse()

	// This is how your user sets the options.
	s := NewServer(
		Host(*host),
		Port(*port),
	)

	fmt.Printf(&quot;server host: %s, port: %d&quot;, s.Host, s.Port)
}
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Data races in Go</title>
            <link>https://www.maxlivinci.com/blog/2019-05-09-data-races-in-go/</link>
            <pubDate>Thu, 09 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-09-data-races-in-go/</guid>
            <description>Go is known for how easy it is to build concurrent programs in it. But, with all this concurrency, comes the possibility of the dreaded data race — one of the hardest bugs to debug if you’re ever unfortunate enough to encounter it in your code.
In this post, we will go through a sample program that causes a data race, and detect the race condition with the race detector tool.</description>
            <content type="html"><![CDATA[

<p>Go is known for how easy it is to build concurrent programs in it. But, with all this concurrency, comes the possibility of the dreaded data race — one of the hardest bugs to debug if you’re ever unfortunate enough to encounter it in your code.</p>

<p>In this post, we will go through a sample program that causes a data race, and detect the race condition with the <a href="https://golang.org/doc/articles/race_detector.html">race detector</a> tool. We will then look at some of the methods to get around and solve the race condition, while still keeping the core logic of our code intact.</p>

<h2 id="the-data-race">The data race</h2>

<p>Rather than explaining what a data race is, let’s look at a sample piece of code:</p>

<pre><code class="language-go">func main() {
	fmt.Println(getNumber())
}

func getNumber() int {
	var i int
	go func() {
		i = 5
	}()

	return i
}
</code></pre>

<p><a href="https://play.golang.org/p/TvaREY1QDFx">Try it here</a></p>

<p>Here, we can see that the <code>getNumber</code> function is setting the value of <code>i</code> in a separate goroutine. We are also returning i from the function without any knowledge of whether our goroutine has completed or not. So now, there are two operations that are taking place:</p>

<p>The value of <code>i</code> is being set to <code>5</code>
The value of <code>i</code> is being returned from the function
Now depending on which of these two operations completes first, our value printed will be either <code>0</code> (the default integer value) or <code>5</code>.</p>

<p>This is why it’s called a data race : the value returned from <code>getNumber</code> changes depending on which of the operations <code>1</code> or <code>2</code> finish first.</p>

<p><img src="https://www.sohamkamani.com/datarace1-f381f099898b2cd7389019a427e53da8.svg" alt="" /></p>

<p>👆 Data race with read finishing first</p>

<p><img src="https://www.sohamkamani.com/datarace2-19c7b8cc43a260dd7f476365d276455d.svg" alt="" /></p>

<p>👆 Data race with write finishing first</p>

<p>As you can imagine, its horrible having to test and use code which acts differently every single time you call it, and this is why data races pose such a huge problem.</p>

<h2 id="detecting-a-data-race">Detecting a data race</h2>

<p>The code we went through is a highly simplified example of a data race in action. In larger applications, a data race is much harder to detect on your own. Fortunately for us, Go (as of v1.1) has an inbuilt data race detector that we can use to pin point potential data race conditions.</p>

<p>Using it is as simple as adding a <code>-race</code> flag to your normal Go command line tools.</p>

<p>For example, let’s try to run the program we just wrote by using the <code>-race</code> flag:</p>

<pre><code>go run -race main.go
</code></pre>

<p>This is what I got as the output:</p>

<pre><code>0
==================
WARNING: DATA RACE
Write at 0x00c420086008 by goroutine 6:
  main.getNumber.func1()
      /Users/soham/go/src/tmp/main.go:15 +0x3b

Previous read at 0x00c420086008 by main goroutine:
  main.getNumber()
      /Users/soham/go/src/tmp/main.go:17 +0x8e
  main.main()
      /Users/soham/go/src/tmp/main.go:9 +0x33

Goroutine 6 (running) created at:
  main.getNumber()
      /Users/soham/go/src/tmp/main.go:14 +0x7d
  main.main()
      /Users/soham/go/src/tmp/main.go:9 +0x33
==================
Found 1 data race(s)
exit status 66
</code></pre>

<p>The first <code>0</code> is the printed result (so we now know that operation 2 finished first). The next few lines give us information about the data race that was detected in out code. (The line numbers may not correspond to the sample code above since the actual code will have imports and package declarations)</p>

<p>We can see that the information about our data race is divided into three sections:</p>

<ol>
<li>The first section tells us that there was an attempted write inside a goroutine that we created (which is where we assign the value <code>5</code> to <code>i</code>)</li>
<li>The next section tells us that was a simultaneous read by the main goroutine, which in our code, traces through the return statement and the print statement.</li>
<li>The third section describes where the goroutine that caused (1) was created.
So, just by adding a <code>-race</code> flag, the <code>go run</code> command has explained exactly what I explained in the previous section about the data race.</li>
</ol>

<p>The <code>-race</code> flag can also be added to the <code>go build</code> and <code>go test</code> commands.</p>

<p>It’s so easy to detect a potential race condition in Go, that I can’t think of any reason not to include the <code>-race</code> flag when building your Go application. The benefits far outweigh the costs(if there even are any) and can contribute to a much more robust application.</p>

<h2 id="fixing-data-races">Fixing data races</h2>

<p>Once you finally find that annoying data race, you’ll be glad to know that Go offers many options to fix it. All of these solutions help to ensure that access to the variable in question is blocked if we are writing to it.</p>

<h3 id="blocking-with-waitgroups">Blocking with waitgroups</h3>

<p>The most straightforward way of solving a data race, is to block read access until the write operation has been completed:</p>

<pre><code class="language-go">func getNumber() int {
	var i int
	// Initialize a waitgroup variable
	var wg sync.WaitGroup
	// `Add(1) signifies that there is 1 task that we need to wait for
	wg.Add(1)
	go func() {
		i = 5
		// Calling `wg.Done` indicates that we are done with the task we are waiting fo
		wg.Done()
	}()
	// `wg.Wait` blocks until `wg.Done` is called the same number of times
	// as the amount of tasks we have (in this case, 1 time)
	wg.Wait()
	return i
}
</code></pre>

<p><a href="https://play.golang.org/p/RHbGQOI3cUv">Try it here</a></p>

<p><img src="https://www.sohamkamani.com/wg-8a9641c4bfb1f4c169ea91891b4d0e27.svg" alt="" /></p>

<h3 id="blocking-with-channels">Blocking with channels</h3>

<p>This method is similar in principle to the last one, except we use channels instead of waitgroups:</p>

<pre><code class="language-go">func getNumber() int {
	var i int
	// Create a channel to push an empty struct to once we're done
	done := make(chan struct{})
	go func() {
		i = 5
		// Push an empty struct once we're done
		done &lt;- struct{}{}
	}()
	// This statement blocks until something gets pushed into the `done` channel
	&lt;-done
	return i
}
</code></pre>

<p><a href="https://play.golang.org/p/oSnM7_7gI3X">Try it here</a></p>

<p><img src="https://www.sohamkamani.com/blockchannel-80dcff0c671bc778b54340aceefae777.svg" alt="" /></p>

<p>Blocking inside the <code>getNumber</code> function, although simple, would get troublesome if we want to call the function repeatedly. The next method follows a more flexible approach towards blocking.</p>

<h3 id="returning-a-channel">Returning a channel</h3>

<p>Instead of using channels to block the function, we could return a channel through which we push our result, once we have it. Unlike the previous two methods, this method does not do any blocking on its own. Instead it leaves the decision of blocking up to the calling code.</p>

<pre><code class="language-go">// return an integer channel instead of an integer
func getNumberChan() &lt;-chan int {
	// create the channel
	c := make(chan int)
	go func() {
		// push the result into the channel
		c &lt;- 5
	}()
	// immediately return the channel
	return c
}
</code></pre>

<p>Then, you can get the result from the channel in the calling code:</p>

<pre><code class="language-go">func main() {
	// The code is blocked until something gets pushed into the returned channel
	// As opposed to the previous method, we block in the main function, instead
	// of the function itself
	i := &lt;-getNumberChan()
	fmt.Println(i)
}
</code></pre>

<p><a href="https://play.golang.org/p/POYn3UalH3e">Try it here</a></p>

<p><img src="https://www.sohamkamani.com/returnchannel-3b129c89d38b8c17bdbd2b2939b20b19.svg" alt="" /></p>

<p>This approach is more flexible because it allows higher level functions to decide their own blocking and concurrency mechanisms, instead of treating the getNumber function as synchronous.</p>
]]></content>
        </item>
        
        <item>
            <title>Standard Package Layout</title>
            <link>https://www.maxlivinci.com/blog/2019-05-08-standard-package-layout/</link>
            <pubDate>Wed, 08 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-08-standard-package-layout/</guid>
            <description>myapp/ cmd/ server/ main.go /internal http/ middleware.go middleware_test.go route.go server.go userhandler.go psql/ psql.go userrepository.go service/ userservice/ userservice.go userservice_test.go # Domain types models.go  Domain types Your application has a logical, high-level language that describes how data and processes interact. This is your domain. If you have an e-commerce application your domain involves things like customers, accounts, charging credit cards, and handling inventory. If you’re Facebook then your domain is users, likes, &amp;amp; relationships.</description>
            <content type="html"><![CDATA[

<pre><code>myapp/
	cmd/
		server/
      main.go
  /internal
    http/
      middleware.go
      middleware_test.go
      route.go
      server.go
      userhandler.go
    psql/
      psql.go
      userrepository.go
    service/
      userservice/
        userservice.go
        userservice_test.go
  # Domain types
	models.go
</code></pre>

<h2 id="domain-types">Domain types</h2>

<p>Your application has a logical, high-level language that describes how data and processes interact. This is your domain. If you have an e-commerce application your domain involves things like customers, accounts, charging credit cards, and handling inventory. If you’re Facebook then your domain is users, likes, &amp; relationships. It’s the stuff that doesn’t depend on your underlying technology.</p>

<h2 id="cmd">/cmd</h2>

<p>Main applications for this project.</p>

<p>The directory name for each application should match the name of the executable you want to have (e.g., <code>/cmd/myapp</code>).</p>

<p>Don&rsquo;t put a lot of code in the application directory. If you think the code can be imported and used in other projects, then it should live in the /pkg directory. If the code is not reusable or if you don&rsquo;t want others to reuse it, put that code in the <code>/internal</code> directory. You&rsquo;ll be surprised what others will do, so be explicit about your intentions!</p>

<p>It&rsquo;s common to have a small <code>main</code> function that imports and invokes the code from the <code>/internal</code> and <code>/pkg</code> directories and nothing else.</p>

<p>See the <code>/cmd</code> directory for examples.</p>

<h2 id="internal">/internal</h2>

<p>Private application and library code. This is the code you don&rsquo;t want others importing in their applications or libraries.</p>

<p>You can optionally add a bit of extra structure to your internal packages to separate your shared and non-shared internal code. It&rsquo;s not required, but it&rsquo;s nice to have visual clues showing the intended package use. Your actual application code can go in the <code>/internal/app</code> directory (e.g., <code>/internal/app/myapp</code>) and the code shared by those apps in the <code>/internal/pkg</code> directory (e.g., <code>/internal/pkg/myprivlib</code>).</p>
]]></content>
        </item>
        
        <item>
            <title>Password Hashing</title>
            <link>https://www.maxlivinci.com/blog/2019-05-07-password-hashing/</link>
            <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-07-password-hashing/</guid>
            <description>This example will show how to hash passwords using bcrypt. For this we have to go get the golang bcrypt library like so:
$ go get golang.org/x/crypto/bcrypt  From now on, every application we write will be able to make use of this library.
// passwords.go package main import ( &amp;quot;fmt&amp;quot; &amp;quot;golang.org/x/crypto/bcrypt&amp;quot; ) func HashPassword(password string) (string, error) { bytes, err := bcrypt.GenerateFromPassword([]byte(password), 14) return string(bytes), err } func CheckPasswordHash(password, hash string) bool { err := bcrypt.</description>
            <content type="html"><![CDATA[<p>This example will show how to hash passwords using bcrypt. For this we have to go get the golang bcrypt library like so:</p>

<pre><code>$ go get golang.org/x/crypto/bcrypt
</code></pre>

<p>From now on, every application we write will be able to make use of this library.</p>

<pre><code class="language-go">// passwords.go
package main

import (
	&quot;fmt&quot;

	&quot;golang.org/x/crypto/bcrypt&quot;
)

func HashPassword(password string) (string, error) {
	bytes, err := bcrypt.GenerateFromPassword([]byte(password), 14)
	return string(bytes), err
}

func CheckPasswordHash(password, hash string) bool {
	err := bcrypt.CompareHashAndPassword([]byte(hash), []byte(password))
	return err == nil
}

func main() {
	password := &quot;secret&quot;
	hash, _ := HashPassword(password) // ignore error for the sake of simplicity

	fmt.Println(&quot;Password:&quot;, password)
	fmt.Println(&quot;Hash:    &quot;, hash)

	match := CheckPasswordHash(password, hash)
	fmt.Println(&quot;Match:   &quot;, match)
}
</code></pre>

<pre><code class="language-bash">$ go run passwords.go
Password: secret
Hash:     $2a$14$ajq8Q7fbtFRQvXpdCq7Jcuy.Rx1h/L4J60Otx.gyNLbAYctGMJ9tK
Match:    true
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Go Memory Layout</title>
            <link>https://www.maxlivinci.com/blog/2019-05-06-go-memory-layout/</link>
            <pubDate>Mon, 06 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-06-go-memory-layout/</guid>
            <description>How memory works internally When you have a struct like this one:
type myStruct struct { myInt bool // 1 byte myFloat float64 // 8 bytes myBool int32 // 4 bytes }  As you see a boolean takes 1 byte, a float64 8 bytes, and an int32 4 bytes.
But the memory allocates consecutive packet of 8 bytes. So instead of taking 1 + 8 + 4 = 13 bytes.</description>
            <content type="html"><![CDATA[

<h2 id="how-memory-works-internally">How memory works internally</h2>

<p>When you have a struct like this one:</p>

<pre><code class="language-go">type myStruct struct {
 	myInt   bool    // 1 byte
	myFloat float64 // 8 bytes
	myBool  int32   // 4 bytes
}
</code></pre>

<p>As you see a boolean takes 1 byte, a float64 8 bytes, and an int32 4 bytes.</p>

<p>But the memory allocates consecutive packet of 8 bytes. So instead of taking 1 + 8 + 4 = 13 bytes. This struct will takes : 24 bytes</p>

<pre><code class="language-go">a := myStruct{}
fmt.Println(unsafe.Sizeof(a)) // 24 bytes
</code></pre>

<p>How to optimize :
It’s possible to optimize, ordering the struct by bytes taken:</p>

<pre><code class="language-go">type myStructOptimized struct {
 	myFloat float64 // 8 bytes
	myInt   int32   // 4 bytes
	myBool  bool    // 1 byte
}
</code></pre>

<p><img src="https://cdn-images-1.medium.com/max/800/1*Zd0nkKfQcIzg6XUPDUBsEg.png" alt="" /></p>

<p>This new struct ordered will take now:</p>

<pre><code class="language-go">b := myStructOptimized{}
fmt.Println(unsafe.Sizeof(b)) // ordered 16 bytes
</code></pre>

<p>16 bytes, because in memory it will be allocated like that (<a href="https://play.golang.org/p/gmkrt6X7aM">https://play.golang.org/p/gmkrt6X7aM</a>) :</p>

<p><img src="https://cdn-images-1.medium.com/max/800/1*wQvQILr8fAJqnWZ07kpmlA.png" alt="" /></p>

<p>8 + 8 = 16 bytes</p>
]]></content>
        </item>
        
        <item>
            <title>Go Escape Analysis</title>
            <link>https://www.maxlivinci.com/blog/2019-05-05-go-escape-analysis/</link>
            <pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-05-go-escape-analysis/</guid>
            <description>Garbage collection is a convenient feature of Go - automatic memory management makes code cleaner and memory leaks less likely. However, GC also adds overhead as the program periodically needs to stop and collect unused objects. The Go compiler is smart enough to automatically decide whether a variable should be allocated on the heap, where it will later need to be garbage collected, or whether it can be allocated as part of the stack frame of the function which declared it.</description>
            <content type="html"><![CDATA[

<p>Garbage collection is a convenient feature of Go - automatic memory management makes code cleaner and memory leaks less likely. However, GC also adds overhead as the program periodically needs to stop and collect unused objects. The Go compiler is smart enough to automatically decide whether a variable should be allocated on the heap, where it will later need to be garbage collected, or whether it can be allocated as part of the stack frame of the function which declared it. <strong>Stack-allocated variables, unlike heap-allocated variables, don’t incur any GC overhead because they’re destroyed when the rest of the stack frame is destroyed - when the function returns.</strong></p>

<p>Go’s escape analysis is more basic than the HotSpot JVM, for example. <strong>The basic rule is that if a reference to a variable is returned from the function where it is declared, it “escapes”</strong> - it can be referenced after the function returns, so it must be heap-allocated. This is complicated by:</p>

<ul>
<li>functions calling other functions</li>
<li>references being assigned to struct members</li>
<li>slices and maps</li>
<li>cgo taking pointers to variables</li>
</ul>

<h2 id="command">Command</h2>

<pre><code class="language-bash">go run -gcflags '-m -l'
</code></pre>

<p>To perform escape analysis, Go builds a graph of function calls at compile time, and traces the flow of input arguments and return values. A function may take a reference to one of it’s arguments, but if that reference is not returned, the variable does not escape. A function may also return a reference, but that reference may be dereferenced or not returned by another function in the stack before the function which declared the variable returns. To illustrate a few simple cases, we can run the compiler with <code>-gcflags '-m'</code>, which will print verbose escape analysis information:</p>

<pre><code class="language-go">package main

type S struct {}

func main() {
  var x S
  _ = identity(x)
}

func identity(x S) S {
  return x
}
</code></pre>

<p>You’ll have to build this with <code>go run -gcflags '-m -l'</code> - the <code>-l</code> flag prevents the function <code>identity</code> from being inlined (that’s a topic for another time). The output is: nothing! Go uses pass-by-value semantics, so the <code>x</code> variable from <code>main</code> will always be copied into the stack of <code>identity</code>. In general code without references always uses stack allocation, trivially. There’s no escape analysis to do.</p>
]]></content>
        </item>
        
        <item>
            <title>Go Command link</title>
            <link>https://www.maxlivinci.com/blog/2019-05-04-go-command-link/</link>
            <pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-04-go-command-link/</guid>
            <description>The -X Go linker option, which you can set with -ldflags, sets the value of a string variable in the Go program being linked. You use it like this: -X main.version 1.0.0.
A simple example: let&amp;rsquo;s say you have this source file saved as hello.go.
package main import &amp;quot;fmt&amp;quot; var who = &amp;quot;World&amp;quot; func main() { fmt.Printf(&amp;quot;Hello, %s.\n&amp;quot;, who) }  Then you can use go run (or other build commands like go build or go install) with the -ldflags option to modify the value of the who variable:</description>
            <content type="html"><![CDATA[

<p>The <code>-X</code> Go linker option, which you can set with <code>-ldflags</code>, sets the value of a string variable in the Go program being linked. You use it like this: <code>-X main.version 1.0.0</code>.</p>

<p>A simple example: let&rsquo;s say you have this source file saved as hello.go.</p>

<pre><code class="language-go">package main

import &quot;fmt&quot;

var who = &quot;World&quot;

func main() {
    fmt.Printf(&quot;Hello, %s.\n&quot;, who)
}
</code></pre>

<p>Then you can use <code>go run</code> (or other build commands like <code>go build</code> or <code>go install</code>) with the <code>-ldflags</code> option to modify the value of the who variable:</p>

<pre><code class="language-bash">$ go run hello.go
Hello, World.
$ go run -ldflags=&quot;-X main.who CloudFlare&quot; hello.go
Hello, CloudFlare.
</code></pre>

<h2 id="do-it-with-docker">Do it with Docker</h2>

<pre><code class="language-dockerfile">FROM golang as builder

WORKDIR /go/src/github.com/LIYINGZHEN/my-app/

COPY app.go	.

RUN GIT_COMMIT=$(git rev-list -1 HEAD) &amp;&amp; \
  CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo \
  -ldflags &quot;-X main.GitCommit=$GIT_COMMIT&quot; -o app .

FROM alpine:latest

WORKDIR /root/

COPY --from=builder /go/src/github.com/LIYINGZHEN/my-app/app .

CMD [&quot;./app&quot;]
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>The Relationship Between Interfaces and Reflection</title>
            <link>https://www.maxlivinci.com/blog/2019-05-03-the-relationship-between-interfaces-and-reflection/</link>
            <pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-03-the-relationship-between-interfaces-and-reflection/</guid>
            <description>Interfaces are one of the fundamental tools for abstraction in Go. Interfaces store type information when assigned a value. Reflection is a method of examining type and value information at runtime.
Go implements reflection with the reflect package which provides types and methods for inspecting portions of the interface structure and even modifying values at runtime.
Assigning a Value to an Interface An interface encodes three things: a value, a method set, and the type of the stored value.</description>
            <content type="html"><![CDATA[

<p>Interfaces are one of the fundamental tools for abstraction in Go. Interfaces store type information when assigned a value. Reflection is a method of examining type and value information at runtime.</p>

<p>Go implements reflection with the reflect package which provides types and methods for inspecting portions of the interface structure and even modifying values at runtime.</p>

<h2 id="assigning-a-value-to-an-interface">Assigning a Value to an Interface</h2>

<p>An interface encodes three things: a value, a method set, and the type of the stored value.</p>

<p>The structure for an interface looks like the following:</p>

<p><img src="https://blog.gopheracademy.com/postimages/advent-2018/interfaces-and-reflect/interface.svg" alt="interface-diagram" /></p>

<p>We can clearly see the three parts of the interface in that diagram: the <code>_type</code> is type information, <code>*data</code> is a pointer to the actual value, and the <code>itab</code> encodes the method set.</p>

<p>When a function accepts an interface as a parameter, passing a value to that function packs the value, method set, and type into the interface.</p>

<h2 id="reflect-type-examining-types">reflect.Type – Examining Types</h2>

<pre><code class="language-go">package main

import (
	&quot;log&quot;
	&quot;reflect&quot;
)

type Gift struct {
	Sender    string
	Recipient string
	Number    uint
	Contents  string
}

func main() {
	g := Gift{
		Sender:    &quot;Hank&quot;,
		Recipient: &quot;Sue&quot;,
		Number:    1,
		Contents:  &quot;Scarf&quot;,
	}

	t := reflect.TypeOf(g)

	if kind := t.Kind(); kind != reflect.Struct {
		log.Fatalf(&quot;This program expects to work on a struct; we got a %v instead.&quot;, kind)
	}

	for i := 0; i &lt; t.NumField(); i++ {
		f := t.Field(i)
		log.Printf(&quot;Field %03d: %-10.10s %v&quot;, i, f.Name, f.Type.Kind())
	}
}
</code></pre>

<pre><code>2018/12/16 12:00:00 Field 000: Sender     string
2018/12/16 12:00:00 Field 001: Recipient  string
2018/12/16 12:00:00 Field 002: Number     uint
2018/12/16 12:00:00 Field 003: Contents   string
</code></pre>

<h2 id="reflect-method-examining-the-itab-method-set">reflect.Method - Examining the itab/Method-Set</h2>

<pre><code class="language-go">package main

import (
	&quot;log&quot;
	&quot;reflect&quot;
)

type Reindeer string

func (r Reindeer) TakeOff() {
	log.Printf(&quot;%q lifts off.&quot;, r)
}

func (r Reindeer) Land() {
	log.Printf(&quot;%q gently lands.&quot;, r)
}

func (r Reindeer) ToggleNose() {
	if r != &quot;rudolph&quot; {
		panic(&quot;invalid reindeer operation&quot;)
	}
	log.Printf(&quot;%q nose changes state.&quot;, r)
}

func main() {
	r := Reindeer(&quot;rudolph&quot;)

	t := reflect.TypeOf(r)

	for i := 0; i &lt; t.NumMethod(); i++ {
		m := t.Method(i)
		log.Printf(&quot;%s&quot;, m.Name)
	}
}
</code></pre>

<pre><code>2018/12/16 12:00:00 Land
2018/12/16 12:00:00 TakeOff
2018/12/16 12:00:00 ToggleNose
</code></pre>

<h2 id="reflect-value-examining-values">reflect.Value – Examining Values</h2>

<pre><code class="language-go">package main

import (
	&quot;log&quot;
	&quot;reflect&quot;
)

type Adult struct {
	Name       string
	Occupation string
	Nice       bool
}

// search a slice of structs for Name field that is &quot;Hank&quot; and set its Nice
// field to true.
func nice(i interface{}) {
	// retrieve the underlying value of i.  we know that i is an
	// interface.
	v := reflect.ValueOf(i)

	// we're only interested in slices to let's check what kind of value v is. if
	// it isn't a slice, return immediately.
	if v.Kind() != reflect.Slice {
		return
	}

	// v is a slice.  now let's ensure that it is a slice of structs.  if not,
	// return immediately.
	if e := v.Type().Elem(); e.Kind() != reflect.Struct {
		return
	}

	// determine if our struct has a Name field of type string and a Nice field
	// of type bool
	st := v.Type().Elem()

	if nameField, found := st.FieldByName(&quot;Name&quot;); found == false || nameField.Type.Kind() != reflect.String {
		return
	}

	if niceField, found := st.FieldByName(&quot;Nice&quot;); found == false || niceField.Type.Kind() != reflect.Bool {
		return
	}

	// Set any Nice fields to true where the Name is &quot;Hank&quot;
	for i := 0; i &lt; v.Len(); i++ {
		e := v.Index(i)
		name := e.FieldByName(&quot;Name&quot;)
		nice := e.FieldByName(&quot;Nice&quot;)

		if name.String() == &quot;Hank&quot; {
			nice.SetBool(true)
		}
	}
}

func main() {
	adults := []Adult{
		{Name: &quot;Bob&quot;, Occupation: &quot;Carpenter&quot;, Nice: true},
		{Name: &quot;Steve&quot;, Occupation: &quot;Clerk&quot;, Nice: true},
		{Name: &quot;Nikki&quot;, Occupation: &quot;Rad Tech&quot;, Nice: false},
		{Name: &quot;Hank&quot;, Occupation: &quot;Go Programmer&quot;, Nice: false},
	}

	log.Printf(&quot;adults before nice: %v&quot;, adults)
	nice(adults)
	log.Printf(&quot;adults after nice: %v&quot;, adults)
}
</code></pre>

<pre><code>2019/04/26 06:57:34 adults before nice: [{Bob Carpenter true} {Steve Clerk true} {Nikki Rad Tech false} {Hank Go Programmer false}]
2019/04/26 06:57:34 adults after nice: [{Bob Carpenter true} {Steve Clerk true} {Nikki Rad Tech false} {Hank Go Programmer true}]
</code></pre>

<h2 id="tool-boxs">Tool Boxs</h2>

<h3 id="show-all-the-methods">Show all the methods</h3>

<pre><code class="language-go">package main

import (
	&quot;log&quot;
	&quot;reflect&quot;
)

func main() {
	t := reflect.TypeOf(reflect.Value{})

	for i := 0; i &lt; t.NumMethod(); i++ {
		m := t.Method(i)
		log.Printf(&quot;%s&quot;, m.Name)
	}
}
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Interfaces in Go</title>
            <link>https://www.maxlivinci.com/blog/2019-05-02-interfaces-in-go/</link>
            <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-02-interfaces-in-go/</guid>
            <description>An interface type is defined by a set of methods. A value of interface type can hold any value that implements those methods.
Go&amp;rsquo;s interfaces let you use duck typing.
Static Type V.S. Dynamic Type V.S. Dynamic Value  Static Type: A static type of interface is interface itself. Dynamic Type: The type of the value which the interface type holds. Dynamic Value: The value of the value which the interface type holds.</description>
            <content type="html"><![CDATA[

<p>An interface type is defined by a set of methods. A value of interface type can hold any value that implements those methods.</p>

<p>Go&rsquo;s interfaces let you use duck typing.</p>

<h2 id="static-type-v-s-dynamic-type-v-s-dynamic-value">Static Type V.S. Dynamic Type V.S. Dynamic Value</h2>

<ol>
<li>Static Type: A static type of interface is interface itself.</li>
<li>Dynamic Type: The type of the value which the interface type holds.</li>
<li>Dynamic Value: The value of the value which the interface type holds.</li>
</ol>

<pre><code class="language-go"> package main

import &quot;fmt&quot;

type MyInterface interface{}

func main() {
	var i MyInterface

	// Print the dynamic value and the dynamic type of the i
	fmt.Printf(&quot;%v %T\n&quot;, i, i) // nil, nil

	i = string(&quot;Hi&quot;)
	fmt.Printf(&quot;%v %T\n&quot;, i, i) // Hi, string

	i = (*MyInterface)(nil)
	fmt.Printf(&quot;%v %T\n&quot;, i, i) // &lt;nil&gt; *main.MyInterface
}
</code></pre>

<p>## Nil Interface</p>

<p>Interface type value is <code>nil</code> if both <code>dynamic value</code> and <code>dynamic type</code> are <code>nil</code>.</p>

<pre><code class="language-go">package main

import &quot;fmt&quot;

type MyInterface interface{}

func main() {
	var i MyInterface

	if i == nil {
		fmt.Println(&quot;1&quot;) // 1
	}

	i = string(&quot;Hi&quot;)
	if i == nil {
		fmt.Println(&quot;2&quot;) // won't print
	}

	i = (*MyInterface)(nil)
	if i == nil {
		fmt.Println(&quot;3&quot;) // won't print
	}
}
</code></pre>

<h2 id="type-assertion">Type assertion</h2>

<p>A type assertion doesn’t really convert an interface to another data type, but it provides access to an interface’s <code>dynamic value</code>, which is typically what you want.</p>

<p>The type assertion <code>x.(T)</code> asserts that the <code>dynamic value</code> stored in x is of type T, and that x is not <code>nil</code>.</p>

<ul>
<li>If <code>T</code> is not an interface, it asserts that the <code>dynamic type</code> of x is identical to T.</li>
<li>If <code>T</code> is an interface, it asserts that the <code>dynamic type</code> of x implements T.</li>
</ul>

<h2 id="type-switches">Type switches</h2>

<p>A type switch performs several type assertions in series and runs the first case with a matching type.</p>

<pre><code class="language-go">var x interface{} = &quot;foo&quot;

switch v := x.(type) {
case nil:
    fmt.Println(&quot;x is nil&quot;)            // here v has type interface{}
case int:
    fmt.Println(&quot;x is&quot;, v)             // here v has type int
case bool, string:
    fmt.Println(&quot;x is bool or string&quot;) // here v has type interface{}
default:
    fmt.Println(&quot;type unknown&quot;)        // here v has type interface{}
}
</code></pre>

<pre><code>x is bool or string
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Go Context</title>
            <link>https://www.maxlivinci.com/blog/2019-05-01-go-context/</link>
            <pubDate>Wed, 01 May 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-05-01-go-context/</guid>
            <description>There are two classical way to control concurrent, one is WaitGroup another way is Context. And today we are going to talk about Context.
Using Channel package main import ( &amp;quot;fmt&amp;quot; &amp;quot;time&amp;quot; ) func monitor(stop chan struct{}) &amp;lt;-chan string { ch := make(chan string) go func() { for { select { case &amp;lt;-stop: close(ch) return case &amp;lt;-time.Tick(1 * time.Second): ch &amp;lt;- &amp;quot;Status OK&amp;quot; } } }() return ch } func main() { stop := make(chan struct{}) go func() { time.</description>
            <content type="html"><![CDATA[

<p>There are two classical way to control concurrent, one is <code>WaitGroup</code> another way is <code>Context</code>. And today we are going to talk about <code>Context</code>.</p>

<h2 id="using-channel">Using Channel</h2>

<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;time&quot;
)

func monitor(stop chan struct{}) &lt;-chan string {
	ch := make(chan string)
	go func() {
		for {
			select {
			case &lt;-stop:
				close(ch)
				return
			case &lt;-time.Tick(1 * time.Second):
				ch &lt;- &quot;Status OK&quot;
			}
		}
	}()
	return ch
}

func main() {
	stop := make(chan struct{})

	go func() {
		time.Sleep(6 * time.Second)
		stop &lt;- struct{}{}
	}()

	for n := range monitor(stop) {
		fmt.Println(n)
	}

	fmt.Println(&quot;Finished. I'm going home&quot;)
}
</code></pre>

<h2 id="using-context">Using Context</h2>

<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;time&quot;
)

func monitor(ctx context.Context) &lt;-chan string {
	ch := make(chan string)
	go func() {
		for {
			select {
			case &lt;-ctx.Done():
				close(ch)
				return
			case &lt;-time.Tick(1 * time.Second):
				ch &lt;- &quot;Status OK&quot;
			}
		}
	}()
	return ch
}

func main() {
	ctx, cancel := context.WithTimeout(context.Background(), 6*time.Second)
	defer cancel()

	for n := range monitor(ctx) {
		fmt.Println(n)
	}

	fmt.Println(&quot;Finished. I'm going home&quot;)
}
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Update map values in Go</title>
            <link>https://www.maxlivinci.com/blog/2019-04-30-update-map-values-in-go/</link>
            <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-04-30-update-map-values-in-go/</guid>
            <description>We can&amp;rsquo;t change values associated with keys in a map, we can only reassign values.
So this leaves us 2 possible options:
 1. Store pointers in the map, so you can modify the pointed object (which is not inside the map data structure). 2. Store struct values, but when you modify it, you need to reassign it to the key.  1. Using pointers Storing pointers in the map: dataManaged := map[string]*Data{}</description>
            <content type="html"><![CDATA[

<p>We can&rsquo;t change values associated with keys in a map, we can only reassign values.</p>

<p>So this leaves us 2 possible options:</p>

<ul>
<li>1. Store pointers in the map, so you can modify the pointed object (which is not inside the map data structure).</li>
<li>2. Store struct values, but when you modify it, you need to reassign it to the key.</li>
</ul>

<h2 id="1-using-pointers">1. Using pointers</h2>

<p>Storing pointers in the map: <code>dataManaged := map[string]*Data{}</code></p>

<pre><code class="language-go">type Person struct {
	Age int
}

func (p *Person) GrowUp() {
	p.Age++
}

func main() {
	m := map[string]*Person{
		&quot;zhangsan&quot;: &amp;Person{Age: 20},
	}
	m[&quot;zhangsan&quot;].Age = 13
	m[&quot;zhangsan&quot;].GrowUp()

	fmt.Printf(&quot;%+v \n&quot;, m[&quot;zhangsan&quot;])
}

</code></pre>

<h2 id="2-reassigning-the-modified-struct">2. Reassigning the modified struct</h2>

<p>Storing struct values in the map: <code>dataManaged := map[string]Data{}</code></p>

<pre><code class="language-go">type Person struct {
	Age int
}

func (p *Person) GrowUp() {
	p.Age++
}

func main() {
	m := map[string]Person{
		&quot;zhangsan&quot;: Person{Age: 20},
	}
	p := m[&quot;zhangsan&quot;]
	p.Age = 23
	p.GrowUp()
	m[&quot;zhangsan&quot;] = p

	fmt.Printf(&quot;%+v \n&quot;, m[&quot;zhangsan&quot;])
}
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Pass by pointer vs pass by value in Go</title>
            <link>https://www.maxlivinci.com/blog/2019-04-29-pass-by-pointer-vs-pass-by-value-in-go/</link>
            <pubDate>Mon, 29 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-04-29-pass-by-pointer-vs-pass-by-value-in-go/</guid>
            <description>Go allows to pass parameters both by pointers (sometimes it’s called by reference) and by values. In this post we will compare both approaches, paying special attention to different contexts that may affect the choice.
Pass by pointer vs pass by value Strictly speaking, there is only one way to pass parameters in Go - by value. Every time a variable is passed as parameter, a new copy of the variable is created and passed to called function or method.</description>
            <content type="html"><![CDATA[

<p>Go allows to pass parameters both by pointers (sometimes it’s called by reference) and by values. In this post we will compare both approaches, paying special attention to different contexts that may affect the choice.</p>

<h2 id="pass-by-pointer-vs-pass-by-value">Pass by pointer vs pass by value</h2>

<p>Strictly speaking, there is only one way to pass parameters in Go - by value. Every time a variable is passed as parameter, a new copy of the variable is created and passed to called function or method. The copy is allocated at a different memory address.</p>

<p>In case a variable is passed by pointer, a new copy of pointer to the same memory address is created. To feel the difference, let’s have a look at how it all works on example.</p>

<h2 id="passing-by-value">Passing by value</h2>

<pre><code class="language-go">package main

import &quot;fmt&quot;

type Person struct {
    firstName string
    lastName  string
}

func changeName(p Person) {
    p.firstName = &quot;Bob&quot;
}

func main() {
    person := Person {
        firstName: &quot;Alice&quot;,
        lastName: &quot;Dow&quot;,
    }

    changeName(person)

    fmt.Println(person)
}
Running the code will get the following output:
</code></pre>

<pre><code>{Alice Dow}
</code></pre>

<p>Note that even though function changeName changes firstName to “Bob”, the change does not affect variable person in function main. This happens because function changeName modifies a copy of variable person, not person itself.</p>

<h2 id="passing-by-pointer">Passing by pointer</h2>

<pre><code class="language-go">package main

import &quot;fmt&quot;

type Person struct {
    firstName string
    lastName  string
}

func changeName(p *Person) {
    p.firstName = &quot;Bob&quot;
}

func main() {
    person := Person {
        firstName: &quot;Alice&quot;,
        lastName: &quot;Dow&quot;,
    }

    changeName(&amp;person)

    fmt.Println(person)
}
</code></pre>

<p>Running the code will get the following output:</p>

<pre><code>{Bob Dow}
</code></pre>

<p>In this case, variable person in function main is modified inside function changeName. This happens because &amp;person and p are two different pointers to the same struct which is stored at the same memory address.</p>

<h2 id="predetermined-choice">Predetermined choice</h2>

<p>A choice is sometimes predetermined by usage context. Let’s have a look at the most common use cases.</p>

<h4 id="variable-must-not-be-modified">Variable must not be modified</h4>

<p>We do not have other option, but pass variable by value. So that variable cannot be modified downstream. And vice versa, if variable is expected to be modified, it must be passed by pointer.</p>

<h4 id="variable-is-a-large-struct">Variable is a large struct</h4>

<p>If variable is a large struct and performance is an issue, it’s preferable to pass variable by pointer. So that to avoid expensive copying of the whole struct in memory.</p>

<h4 id="variable-is-a-map-or-slice">Variable is a map or slice</h4>

<p>Maps and slices are reference types in Go and should be passed by values.</p>

<h2 id="passing-by-value-often-is-cheaper">Passing by value often is cheaper</h2>

<p>Even though Go looks a bit like C, its compiler works differently. And C analogy does not always work with Go. Passing by value in Go may be significantly cheaper than passing by pointer. This happens because Go uses escape analysis to determine if variable can be safely allocated on function’s stack frame, which could be much cheaper then allocating variable on the heap. Passing by value simplifies escape analysis in Go and gives variable a better chance to be allocated on the stack.</p>

<h2 id="bottom-line">Bottom line</h2>

<p>Sometimes the choice of how to pass variable is predetermined by variable type or its usage. Otherwise, it’s highly recommended to pass variables by value. Also it is very important to be consistent with your choice, so that not to confuse yourself and your teammates.</p>
]]></content>
        </item>
        
        <item>
            <title>Go Tooling Essentials</title>
            <link>https://www.maxlivinci.com/blog/2019-04-28-go-tooling-essentials/</link>
            <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-04-28-go-tooling-essentials/</guid>
            <description>New to the Go tools? Or do you want to expand your knowledge? This article is about the flags for the Go tools everyone should know.
$ go test -v It provides chatty output for the testing. It prints the test name, its status (failed or passed), how much it took to run the test, any logs from the test case, etc.
go test without the -v flag is highly quiet, I always use it with -v turned on.</description>
            <content type="html"><![CDATA[

<p>New to the Go tools? Or do you want to expand your knowledge? This article is about the flags for the Go tools everyone should know.</p>

<h2 id="go-test-v">$ go test -v</h2>

<p>It provides chatty output for the testing. It prints the test name, its status (failed or passed), how much it took to run the test, any logs from the test case, etc.</p>

<p>go test without the <code>-v</code> flag is highly quiet, I always use it with <code>-v</code> turned on. Sample output:</p>

<pre><code class="language-bash">$ go test -v context
=== RUN   TestBackground
--- PASS: TestBackground (0.00s)
=== RUN   TestTODO
--- PASS: TestTODO (0.00s)
=== RUN   TestWithCancel
--- PASS: TestWithCancel (0.10s)
=== RUN   TestParentFinishesChild
--- PASS: TestParentFinishesChild (0.00s)
=== RUN   TestChildFinishesFirst
--- PASS: TestChildFinishesFirst (0.00s)
=== RUN   TestDeadline
--- PASS: TestDeadline (0.16s)
=== RUN   TestTimeout
--- PASS: TestTimeout (0.16s)
=== RUN   TestCanceledTimeout
--- PASS: TestCanceledTimeout (0.10s)
...
PASS
ok  	context	2.426s
</code></pre>

<h2 id="go-test-race">$ go test -race</h2>

<pre><code class="language-go">Go’s race detector is available from the Go tools via `-race`. go test also supports this flag and reports races. Use this flag during development to detect the races.
</code></pre>

<h2 id="go-test-run">$ go test -run</h2>

<p>You can filter tests to run by regex and the <code>-run</code> flag. The following command will only test examples.</p>

<pre><code class="language-bash">$ go test -run=Example
</code></pre>

<h2 id="go-test-coverprofile">go test -coverprofile</h2>

<p>You can output a cover profile as you are testing a package, then use go tool to visualize them on a browser.</p>

<pre><code class="language-go">$ go test -coverprofile=c.out &amp;&amp; go tool cover -html=c.out
</code></pre>

<p>The command above will create a coverage profile and open the results page in the browser. The visualized results will look like the page below:</p>

<p><img src="https://user-images.githubusercontent.com/11765228/56710614-52ad8600-6727-11e9-9a55-ef40b16cea26.png" alt="context-coverage" /></p>

<h2 id="go-test-bench-cpuprofile-cpu-prof">go test -bench . -cpuprofile=cpu.prof</h2>

<pre><code class="language-bash">$ go test -bench . -cpuprofile=cpu.prof
$ go tool pprof cpu.prof
</code></pre>

<pre><code class="language-bash">$ (pprof) web
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Unit Testing HTTP Servers</title>
            <link>https://www.maxlivinci.com/blog/2019-04-27-unit-testing-http-servers/</link>
            <pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-04-27-unit-testing-http-servers/</guid>
            <description>You’re building a web (HTTP) service in Go, and you want to unit test your handler functions. You’ve got a grip on Go’s net/http package, but you’re not sure where to start with testing that your handlers return the correct HTTP status codes, HTTP headers or response bodies.
Let’s walk through how you go about this, injecting the necessary dependencies, and mocking the rest.
A Basic Handler We’ll start by writing a basic test: we want to make sure our handler returns a HTTP 200 (OK) status code.</description>
            <content type="html"><![CDATA[

<p>You’re building a web (HTTP) service in Go, and you want to unit test your handler functions. You’ve got a grip on Go’s <code>net/http</code> package, but you’re not sure where to start with testing that your handlers return the correct HTTP status codes, HTTP headers or response bodies.</p>

<p>Let’s walk through how you go about this, injecting the necessary dependencies, and mocking the rest.</p>

<h2 id="a-basic-handler">A Basic Handler</h2>

<p>We’ll start by writing a basic test: we want to make sure our handler returns a HTTP 200 (OK) status code. This is our handler:</p>

<pre><code class="language-go">package handlers

func HealthCheckHandler(w http.ResponseWriter, r *http.Request) {
    w.WriteHeader(http.StatusOK)
    w.Header().Set(&quot;Content-Type&quot;, &quot;application/json&quot;)
    io.WriteString(w, `{&quot;alive&quot;: true}`)
}
</code></pre>

<p>And this is our test:</p>

<pre><code class="language-go">package handlers

import (
    &quot;net/http&quot;
    &quot;net/http/httptest&quot;
    &quot;testing&quot;
)

func TestHealthCheckHandler(t *testing.T) {
    req, err := http.NewRequest(&quot;GET&quot;, &quot;/health-check&quot;, nil)

	checkError(err, t)

	rr := httptest.NewRecorder()

    handler := http.HandlerFunc(HealthCheckHandler)

    handler.ServeHTTP(rr, req)

    if status := rr.Code; status != http.StatusOK {
        t.Errorf(&quot;handler returned wrong status code: got %v want %v&quot;,
            status, http.StatusOK)
    }
}
</code></pre>

<h2 id="middleware-test">Middleware Test</h2>

<pre><code class="language-go">func RequestIDMiddleware(h http.Handler) http.Handler {
	fn := func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), &quot;app.req.id&quot;, &quot;12345&quot;)
		h.ServeHTTP(w, r.WithContext(ctx))
	}
	return http.HandlerFunc(fn)
}
</code></pre>

<p>And the test:</p>

<pre><code class="language-go">func TestPopulateContext(t *testing.T) {
	req, err := http.NewRequest(&quot;GET&quot;, &quot;/api/users&quot;, nil)

	checkError(err, t)

	testHandler := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		if val, ok := r.Context().Value(&quot;app.req.id&quot;).(string); !ok {
			t.Errorf(&quot;app.req.id not in request context: got %q&quot;, val)
		}
	})

	rr := httptest.NewRecorder()

	handler := RequestIDMiddleware(testHandler)

	handler.ServeHTTP(rr, req)
}
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>JSON and Go</title>
            <link>https://www.maxlivinci.com/blog/2019-04-26-json-and-go/</link>
            <pubDate>Fri, 26 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-04-26-json-and-go/</guid>
            <description>Parsing a format like JSON in a statically typed language like Go presents a bit of a problem. If anything could show up in the JSON body, how does the compiler know how to setup memory to have a spot to place everything?
There are two answers to this. The easy option, for when you know what your data will look like, is to parse the JSON into a struct you’ve defined.</description>
            <content type="html"><![CDATA[

<p>Parsing a format like JSON in a statically typed language like Go presents a bit of a problem. If anything could show up in the JSON body, how does the compiler know how to setup memory to have a spot to place everything?</p>

<p>There are two answers to this. The easy option, for when you know what your data will look like, is to parse the JSON into a struct you’ve defined. Any field which doesn’t fit in the struct will just be ignored. We’ll cover that option first.</p>

<h2 id="parsing-into-a-struct">Parsing into a Struct</h2>

<p>Here’s an example of parsing into a struct:</p>

<pre><code class="language-go">type App struct {
    Id string `json:&quot;id&quot;`
    Title string `json:&quot;title&quot;`
}

data := []byte(`
    {
        &quot;id&quot;: &quot;k34rAT4&quot;,
        &quot;title&quot;: &quot;My Awesome App&quot;
    }
`)

var app App
err := json.Unmarshal(data, &amp;app)
if err != nil {
    panic(err)
}

fmt.Printf(&quot;%+v \n&quot;, app)
</code></pre>

<p>or you can use <code>json</code> package</p>

<pre><code class="language-go">type App struct {
    Id    string `json:&quot;id&quot;`
    Title string `json:&quot;title&quot;`
}

r := bytes.NewReader([]byte(`{&quot;id&quot;: &quot;k34rAT4&quot;, &quot;title&quot;: &quot;My Awesome App&quot;}`))

var app App
err := json.NewDecoder(r).Decode(&amp;app)
if err != nil {
    panic(err)
}

fmt.Printf(&quot;%+v \n&quot;, app)
</code></pre>

<p>What you’re left with is <code>app</code> populated with the parsed JSON that was in <code>data</code>. You’ll also notice that the go term for parsing json is &ldquo;Unmarshalling&rdquo;.</p>

<h2 id="rendering-from-a-struct">Rendering from a Struct</h2>

<p>Outputting from a struct works exactly as parsing but in reverse:</p>

<pre><code class="language-go">data, err := json.Marshal(app)
</code></pre>

<p>As with all structs in Go, it’s important to remember that only fields with a capital first letter are visible to external programs like the JSON Marshaller.</p>

<h2 id="struct-tags">Struct Tags</h2>

<p>One thing you’ll notice is the “tagged” data included in our struct between backticks. The JSON parser reads from that several clues about how to parse that value.</p>

<h3 id="the-field-name">THE FIELD NAME</h3>

<p>As you might know, Go requires all exported fields to start with a capitalized letter. It’s not common to use that style in JSON however. We use the tag to let the parser know where to actually look for the value.</p>

<p>You can see an example of that in the example above, but as a refresher this is what it looks like:</p>

<pre><code class="language-go">type MyStruct struct {
    SomeField string `json:&quot;some_field&quot;`
}
</code></pre>

<h3 id="what-to-do-if-the-field-is-empty">WHAT TO DO IF THE FIELD IS EMPTY</h3>

<p>The JSON parser also accepts a flag in the tag to let it know what to do if the field is empty. The <code>omitempty</code> flag tells it to not include the JSON value in the output if it’s the “zero-value” for that type.</p>

<p>The “zero-value” for numbers is 0, for strings it’s the empty string, for maps, slices and pointers it’s nil. This is how you include the <code>omitempty</code> flag.</p>

<pre><code class="language-go">type MyStruct struct {
    SomeField string `json:&quot;some_field,omitempty&quot;`
}
</code></pre>

<p>Notice that the flag goes inside the quotes.</p>

<p>If the <code>SomeField</code> was an empty string, and you converted it to JSON, some_field wouldn’t be included in the output at all.</p>

<p>In other words, if <code>some_field == &quot;&quot;</code>:</p>

<ul>
<li>With <code>omitempty</code> the JSON value would be <code>{}</code></li>
<li>Without <code>omitempty</code> the JSON value would be <code>{&quot;some_field&quot;: &quot;&quot;}</code></li>
</ul>

<p><code>omitempty</code> is valuable when you deprecate a field and no longer want it to be included in output, when you have a flag which defaults to false so there’s no need to include it, or when you are only ever operating on your data with Go, so there’s no harm in using the built-in “zero-value” as the default.</p>

<h3 id="skipping-fields">SKIPPING FIELDS</h3>

<p>To have the JSON parser/writer skip a field, just give it the name &ldquo;-&rdquo;. For example:</p>

<pre><code class="language-go">type App struct {
    Id string `json:&quot;id&quot;`
    Password string `json:&quot;-&quot;`
}
</code></pre>

<p>It can also make sense to have a field which will be parsed if it’s available, but will never be outputted.</p>

<h2 id="nested-fields">Nested Fields</h2>

<p>Nested fields refers to structs which are properties of other structs. In short, nested fields work exactly as you’d expect. You can nest a slice, map or other struct inside your struct and the JSON will recursively parse everything correctly. If you have a field which can be anything, you can always use the <code>interface{}</code> type.</p>

<p>Go also supports nesting one struct in another. For example:</p>

<pre><code class="language-go">type App struct {
    Id string `json:&quot;id&quot;`
}

type Org struct {
    Name string `json:&quot;name&quot;`
}

type AppWithOrg struct {
    App
    Org
}
</code></pre>

<p>You can parse into a value with the <code>AppWithOrg</code> type, and it will have all the properties. You can also pull the <code>.App</code> or <code>.Org</code> out of it. For example:</p>

<pre><code class="language-go">data := []byte(`
    {
        &quot;id&quot;: &quot;k34rAT4&quot;,
        &quot;name&quot;: &quot;My Awesome Org&quot;
    }
`)

var appWithOrg AppWithOrg
err := json.Unmarshal(data, &amp;appWithOrg)

app := appWithOrg.App
org := appWithOrg.Org
</code></pre>

<p>Combining structs like this might seem strange, but it’s very valuable if you, for example, have an API which includes some extra data with your actual value.</p>
]]></content>
        </item>
        
        <item>
            <title>Efficient String Concatenation in Go</title>
            <link>https://www.maxlivinci.com/blog/2019-04-25-efficient-string-concatenation-in-go/</link>
            <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-04-25-efficient-string-concatenation-in-go/</guid>
            <description>In this article I investigate the computational performance of various string concatenation methods in the Go programming language.
To evaluate the options, I prepared some typical Go benchmarks using the Go testing package. A benchmark looks something like this:
func BenchmarkNative(b *testing.B) { var s string next := nextString() for i := 0; i &amp;lt; b.N; i++ { s += next() } }  For the purposes of these benchmarks, I imagined having a process that returns string segments one by one, and these segments need to be concatenated to form one string.</description>
            <content type="html"><![CDATA[

<p>In this article I investigate the computational performance of various string concatenation methods in the Go programming language.</p>

<p>To evaluate the options, I prepared some typical Go benchmarks using the Go testing package. A benchmark looks something like this:</p>

<pre><code class="language-go">func BenchmarkNative(b *testing.B) {
	var s string
	next := nextString()
	for i := 0; i &lt; b.N; i++ {
		s += next()
	}
}
</code></pre>

<p>For the purposes of these benchmarks, I imagined having a process that returns string segments one by one, and these segments need to be concatenated to form one string. To represent such a process, I created a simple iterator that returns the string version of its current index on each call:</p>

<pre><code class="language-go">// nextString is an iterator we use to represent a process
// that returns strings that we want to concatenate in order.
func nextString() func() string {
    n := 0
    // closure captures variable n
    return func() string {
        n += 1
        return strconv.Itoa(n)
    }
}
</code></pre>

<p>Every method we evaluate will call this function in a loop so that the fully concatenated string looks something like <code>0123456789101112131415....</code> There is function call overhead to take into account in this, but since all the benchmarks will have the same overhead, the comparison is still fair. Now that we have the basic setup for the benchmark, let’s see what the methods are we’ll be evaluating.</p>

<h2 id="method-1-naive-appending-with">Method 1: Naive Appending with +=</h2>

<pre><code class="language-go">func BenchmarkNaiveConcat(b *testing.B) {
	var s string
	next := nextString()
	for i := 0; i &lt; b.N; i++ {
		s += next()
	}
}
</code></pre>

<h2 id="method-2-strings-join">Method 2: strings.Join</h2>

<pre><code class="language-go">func BenchmarkJoin(b *testing.B) {
	var s string
	next := nextString()
	for i := 0; i &lt; b.N; i++ {
		s = strings.Join([]string{s, next()}, &quot;&quot;)
	}
}
</code></pre>

<h2 id="method-3-sprintf">Method 3: Sprintf</h2>

<pre><code class="language-go">func BenchmarkSprintf(b *testing.B) {
	var s string
	next := nextString()
	for i := 0; i &lt; b.N; i++ {
		s = fmt.Sprintf(&quot;%s%s&quot;, s, next())
	}
}
</code></pre>

<h2 id="method-4-bytes-buffer">Method 4: bytes.Buffer</h2>

<pre><code class="language-go">func BenchmarkBufferString(b *testing.B) {
	buffer := bytes.NewBufferString(&quot;&quot;)
	next := nextString()
	for i := 0; i &lt; b.N; i++ {
		buffer.WriteString(next())
	}
	buffer.String()
}
</code></pre>

<h2 id="the-result">The result</h2>

<p><code>Method #4 (bytes.Buffer)</code> is the winner!</p>

<pre><code class="language-go">BenchmarkNaiveConcat    	  300000	    166993 ns/op	    809751 B/op	    2 allocs/op
BenchmarkJoin           	  200000	    150370 ns/op	    518121 B/op	    2 allocs/op
BenchmarkSprintf        	  100000	    104652 ns/op	    481905 B/op	    5 allocs/op
BenchmarkBufferString   	20000000	      89.0 ns/op	        44 B/op     0 allocs/op
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Writing middleware in Golang</title>
            <link>https://www.maxlivinci.com/blog/2019-04-24-writing-middleware-in-golang/</link>
            <pubDate>Wed, 24 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-04-24-writing-middleware-in-golang/</guid>
            <description>When we talk about Middleware in Go, at its simplest, we are really talking about running code before and/or after our handler code in a HTTP request lifecycle. For example, logging middleware might write the incoming request details to a log, then call the handler code, before writing details about the response to the log. One of the cool things about middleware, if implemented correctly, is that these units are extremely flexible, reusable, and sharable.</description>
            <content type="html"><![CDATA[

<p>When we talk about Middleware in Go, at its simplest, we are really talking about running code before and/or after our handler code in a HTTP request lifecycle. For example, logging middleware might write the incoming request details to a log, then call the handler code, before writing details about the response to the log. One of the cool things about middleware, if implemented correctly, is that these units are extremely flexible, reusable, and sharable.</p>

<p>Keeping HTTP handling code to a simple signature (w http.ResponseWriter, r *http.Request) means that any Go programmer can come to your code, and jump right in without having to learn too much about the code.</p>

<p>Rather than writing functions or types that take in an http.HandlerFunc (or http.Handler) and return a wrapper alternative, we are going to represent this idea in a type of its own.</p>

<h2 id="adapter-type">Adapter type</h2>

<pre><code class="language-go">type Adapter func(http.Handler) http.Handler
</code></pre>

<p>The Adapter type (it gets its name from the adapter pattern — also known as the decorator pattern) above is a function that both takes in and returns an http.Handler. This is the essence of the wrapper; we will pass in an existing http.Handler, the Adapter will adapt it, and return a new (probably wrapped) http.Handler for us to use in its place. So far this is not much different from just wrapping http.HandlerFunc types, however, now, we can instead write functions that themselves return an Adapter.</p>

<p>The following example is going to allow us to specify the log.Logger (from the standard package) that we want our “before” and “after” strings written to.</p>

<pre><code class="language-go">func Notify(logger *log.Logger) Adapter {
  return func(h http.Handler) http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
      logger.Println(&quot;before&quot;)
      defer logger.Println(&quot;after&quot;)
      h.ServeHTTP(w, r)
    }
  }
}
</code></pre>

<p>Now, thanks to closures, we can capture the logger object inside our functions without spoiling the Adapter interface (it still takes and returns a single http.Handler).</p>

<h2 id="using-the-adapters">Using the Adapters</h2>

<p>The simplest way (albeit somewhat confusing to read) to make use of an adapter is to get the Adapter function and immediately call it:</p>

<pre><code class="language-go">logger := log.New(os.Stdout, &quot;server: &quot;, log.Lshortfile)
http.Handle(&quot;/&quot;, Notify(logger)(indexHandler))
</code></pre>

<p>A cleaner approach is to provide yourself an Adapt function, that can do all your adapting for you.</p>

<pre><code class="language-go">func Adapt(h http.Handler, adapters ...Adapter) http.Handler
</code></pre>

<p>Our Adapt function takes the handler you want to adapt, and a list of our Adapter types. The result of our Notify function is an acceptable Adapter. Our Adapt function will simply iterate over all adapters, calling them one by one (in reverse order) in a chained manner, returning the result of the first adapter.</p>

<pre><code class="language-go">func Adapt(h http.Handler, adapters ...Adapter) http.Handler {
  for i := len(adapters); i &gt; 0; i-- {
    h = adapter[i](h)
  }
  return h
}
</code></pre>

<p>Assuming we have several suitable functions that return Adapters, we can then implement middleware on our handlers by calling the Adapt function:</p>

<pre><code class="language-go">http.Handle(&quot;/&quot;,
  Adapt(
    indexHandler,
    Notify(logger),
    CopyMgoSession(db),
    CheckAuth(providers),
    AddHeader(&quot;Server&quot;, &quot;Mine&quot;),
  )
</code></pre>

<p>The execution for indexHandler would then run like this:</p>

<ul>
<li>Notify (log “before” string — maybe with some other bits)</li>
<li>CopyMgoSession (copy db session and make it available to handler)</li>
<li>CheckAuth (check auth cresds and bail if failed)</li>
<li>AddHeader (add response header)</li>
<li>indexHandler</li>
<li>Any AddHeader deferred functions</li>
<li>Any CheckAuth deferred functions</li>
<li>CopyMgoSession deferred function (probably closing the database copy)</li>
<li>Notify deferred function (writing “after” string)</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Working with Files in Go</title>
            <link>https://www.maxlivinci.com/blog/2019-04-23-working-with-files-in-go/</link>
            <pubDate>Tue, 23 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-04-23-working-with-files-in-go/</guid>
            <description>One of the fundamental aspects of UNIX is that everything is a file. We don&amp;rsquo;t necessarily know what the file descriptor maps to, that is abstracted by the operating system&amp;rsquo;s device drivers. The operating system provides us an interface to the device in the form of a file.
The reader and writer interfaces in Go are similar abstractions. We simply read and write bytes, without the need to understand where or how the reader gets its data or where the writer is sending the data.</description>
            <content type="html"><![CDATA[

<p>One of the fundamental aspects of UNIX is that everything is a file. We don&rsquo;t necessarily know what the file descriptor maps to, that is abstracted by the operating system&rsquo;s device drivers. The operating system provides us an interface to the device in the form of a file.</p>

<p>The reader and writer interfaces in Go are similar abstractions. We simply read and write bytes, without the need to understand where or how the reader gets its data or where the writer is sending the data. Look in /dev to find available devices. Some will require elevated privileges to access.`</p>

<h2 id="create-empty-file">Create Empty File</h2>

<pre><code class="language-go">newFile, err = os.Create(&quot;test.txt&quot;)
if err != nil {
		log.Fatal(err)
}
</code></pre>

<h2 id="get-file-info">Get File Info</h2>

<pre><code class="language-go">fileInfo, err = os.Stat(&quot;test.txt&quot;)
if err != nil {
	log.Fatal(err)
}
</code></pre>

<h2 id="delete-a-file">Delete a File</h2>

<pre><code class="language-go">err := os.Remove(&quot;test.txt&quot;)
if err != nil {
		log.Fatal(err)
}
</code></pre>

<h2 id="open-and-close-files">Open and Close Files</h2>

<pre><code class="language-go">file, err := os.Open(&quot;filetoread.txt&quot;)
if err != nil {
  fmt.Println(err)
  return
}
defer file.Close()


// OpenFile with more options. Last param is the permission mode
// Second param is the attributes when opening
file, err = os.OpenFile(&quot;test.txt&quot;, os.O_APPEND, 0666)
if err != nil {
	log.Fatal(err)
}
file.Close()

// Use these attributes individually or combined
// with an OR for second arg of OpenFile()
// e.g. os.O_CREATE|os.O_APPEND
// or os.O_CREATE|os.O_TRUNC|os.O_WRONLY

// os.O_RDONLY // Read only
// os.O_WRONLY // Write only
// os.O_RDWR // Read and write
// os.O_APPEND // Append to end of file
// os.O_CREATE // Create is none exist
// os.O_TRUNC // Truncate file when opening
</code></pre>

<h2 id="check-if-file-exists">Check if File Exists</h2>

<pre><code class="language-go">fileInfo, err := os.Stat(&quot;test.txt&quot;)
if err != nil {
		if os.IsNotExist(err) {
				log.Fatal(&quot;File does not exist.&quot;)
		}
}
</code></pre>

<h2 id="quick-write-to-file">Quick Write to File</h2>

<p>The ioutil package has a useful function called <code>WriteFile()</code> that will handle creating/opening, writing a slice of bytes, and closing. It is useful if you just need a quick way to dump a slice of bytes to a file.</p>

<pre><code class="language-go">err := ioutil.WriteFile(&quot;test.txt&quot;, []byte(&quot;Hi\n&quot;), 0666)
if err != nil {
		log.Fatal(err)
}
</code></pre>

<h2 id="quick-read-whole-file-to-memory">Quick Read Whole File to Memory</h2>

<pre><code class="language-go">data, err := ioutil.ReadFile(&quot;test.txt&quot;)
if err != nil {
	log.Fatal(err)
}
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Slices from the ground up</title>
            <link>https://www.maxlivinci.com/blog/2019-04-22-slices-from-the-ground-up/</link>
            <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-04-22-slices-from-the-ground-up/</guid>
            <description>Arrays Arrays in Go have two relevant properties:
 They have a fixed size; [5]int is is distinct from [3]int. They are value types. Consider this example:  package main import &amp;quot;fmt&amp;quot; func main() { var a [5]int b := a b[2] = 7 fmt.Println(a, b) // prints [0 0 0 0 0] [0 0 7 0 0] }  The statement b := a declares a new variable, b, of type [5]int, and copies the contents of a to b.</description>
            <content type="html"><![CDATA[

<h2 id="arrays">Arrays</h2>

<p>Arrays in Go have two relevant properties:</p>

<ul>
<li><strong>They have a fixed size</strong>; [5]int is is distinct from [3]int.</li>
<li><strong>They are value types</strong>. Consider this example:</li>
</ul>

<pre><code class="language-go">package main

import &quot;fmt&quot;

func main() {
  var a [5]int
  b := a
  b[2] = 7
  fmt.Println(a, b) // prints [0 0 0 0 0] [0 0 7 0 0]
}
</code></pre>

<p>The statement <code>b := a</code> declares a new variable, b, of type <code>[5]int</code>, and copies the contents of <code>a</code> to <code>b</code>. Updating <code>b</code> has no effect on the contents of <code>a</code> because <code>a</code> and <code>b</code> are independent values.</p>

<h2 id="slices">Slices</h2>

<p>Go’s slice type differs from its array counterpart in two important ways:</p>

<ul>
<li>Slices do not have a fixed length.</li>
<li>Assigning one slice variable to another does not make a copy of the slices contents.</li>
</ul>

<h2 id="the-slice-header-value">The slice header value</h2>

<pre><code class="language-go">package runtime

type slice struct {
  ptr   unsafe.Pointer
  len   int
  cap   int
}
</code></pre>

<p>This is important because unlike <code>map</code> and <code>chan</code> types <strong><code>slices</code> are <code>value types</code></strong> and are copied when assigned or passed as arguments to functions.</p>

<pre><code class="language-go">package main

import &quot;fmt&quot;

func double(s []int) {
  s = append(s, s...)
}

func main() {
  s := []int{1, 2, 3}
  double(s)
  fmt.Println(s, len(s)) // prints [1 2 3] 3
}
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Gopher Reading List</title>
            <link>https://www.maxlivinci.com/blog/2019-04-21-gopher-reading-list/</link>
            <pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-04-21-gopher-reading-list/</guid>
            <description>Here is a reading list of blog posts about Go. It aspires to include only the most useful and relevant material that anyone writing Go should eventually read. By definition, the list is a work in progress.
Rather than being comprehensive, the list is a curated selection fixed at 200 entries.
Go is growing fast and so are the number of blog posts about it. If an interested reader knows of a great post not on this list, please open an issue with a link to the post.</description>
            <content type="html"><![CDATA[

<p>Here is a reading list of blog posts about <a href="https://golang.org">Go</a>. It aspires
to include only the most useful and relevant material that anyone writing Go
should eventually read. By definition, the list is a work in progress.</p>

<p>Rather than being comprehensive, the list is a curated selection fixed at 200
entries.</p>

<p>Go is growing fast and so are the number of blog posts about it. If an
interested reader knows of a great post not on this list, please open an issue
with a link to the post.</p>

<h2 id="start-here">Start Here</h2>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@kevalpatel2106/why-should-you-learn-go-f607681fad65">Why should you learn Go?</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://golang.org/doc/code.html">How to Write Go Code</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://tour.golang.org/welcome/1">A Tour of Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://golang.org/doc/faq">Frequently Asked Questions</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://github.com/cdarwin/go-koans">Go Koans</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://gobyexample.com/">Go by Example</a></label></li>
</ul>

<h2 id="beginner">Beginner</h2>

<h3 id="some-basics">Some basics</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://dave.cheney.net/2017/04/26/understand-go-pointers-in-less-than-800-words-or-your-money-back">Understand Go pointers in less than 800 words or your money back</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://dave.cheney.net/2014/03/19/channel-axioms">Channel Axioms</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://guzalexander.com/2013/12/06/golang-channels-tutorial.html">Golang channels tutorial</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://blog.mergermarket.it/now-youre-thinking-with-channels/">(Now You&rsquo;re) Thinking With Channels</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.learngoprogramming.com/golang-defer-simplified-77d3b2b817ff">Go Defer Simplified with Practical Visuals</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://joeshaw.org/understanding-go-panic-output/">Understanding Go panic output</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://divan.github.io/posts/avoid_gotchas/">How to avoid Go gotchas</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://deadbeef.me/2018/01/go-gotchas">Common Gotchas in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/">50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://dave.cheney.net/2018/07/12/slices-from-the-ground-up">Slices from the ground up</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://www.calhoun.io/6-tips-for-using-strings-in-go/">6 Tips for Using Strings in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://www.tapirgames.com/blog/golang-unofficial-faq">Unofficial Go FAQ</a></label></li>
</ul>

<h3 id="worth-reading-again-and-again">Worth reading, again and again</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://golang.org/doc/effective_go.html">Effective Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://divan.github.io/posts/go_concurrency_visualize/">Visualizing Concurrency in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.golang.org/strings">Strings, bytes, runes and characters in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.golang.org/slices">Arrays, slices (and strings): The mechanics of &lsquo;append&rsquo;</a></label></li>
</ul>

<h3 id="online-books">Online Books</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://www.golangbootcamp.com/book/">Go Bootcamp</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://go101.org/article/101.html">Go 101</a></label></li>
</ul>

<p>See <a href="https://github.com/dariubs/GoBooks">Go Books</a> for a longer list of books, both free and paid.</p>

<h3 id="organization-and-style">Organization and Style</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://commandcenter.blogspot.com.br/2012/06/less-is-exponentially-more.html">Less is exponentially more</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://go-proverbs.github.io/">Go Proverbs</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://github.com/golang/go/wiki/CodeReviewComments">Code Review Comments</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://dmitri.shuralyov.com/idiomatic-go">Idiomatic Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.golang.org/error-handling-and-go">Error handling and Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://morsmachine.dk/error-handling">Effective error handling in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://davidnix.io/post/error-handling-in-go/">Go&rsquo;s Error Handling is Elegant</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://www.calhoun.io/one-liner-if-statements-with-errors/">When Should I Use One Liner if&hellip;else Statements in Go?</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://dave.cheney.net/2014/12/01/five-suggestions-for-setting-up-a-go-project">Five Suggestions for Setting up a Go project</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://www.elliotdwright.com/2018/02/27/how-i-structure-some-of-my-projects/">The One with the Directory Structure and Manual Wiring</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@benbjohnson/structuring-tests-in-go-46ddee7a25c">Structuring Tests in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.golang.org/organizing-go-code">Organizing Go Code</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://darian.af/post/the-anatomy-of-a-golang-project/">The anatomy of a Go project</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@benbjohnson/standard-package-layout-7cdbc8391fc1">Standard Package Layout</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@benbjohnson/structuring-applications-in-go-3b04be4ff091">Structuring Applications in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://rakyll.org/style-packages/">Style guideline for Go packages</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.golang.org/package-names">Package names</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://www.ardanlabs.com/blog/2017/06/for-range-semantics.html">For Range Semantics</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://jordanorelli.com/post/32665860244/how-to-use-interfaces-in-go">How to use interfaces in Go</a></label></li>
</ul>

<h3 id="web">Web</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://rosalita.github.io/building-a-web-app-with-go/">Creating My First Web Application with Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://thenewstack.io/make-a-restful-json-api-go/">Making a RESTful JSON API in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@ScullWM/golang-http-server-for-pro-69034c276355">Golang HTTP server for pro</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://www.alexedwards.net/blog/serving-static-sites-with-go">Serving Static Sites with Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://www.calhoun.io/an-intro-to-templates-in-go-part-1-of-3/">An Intro To Templates in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://www.calhoun.io/apis-are-just-web-applications/">JSON APIs Are Just Web Applications</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@matryer/writing-middleware-in-golang-and-how-go-makes-it-so-much-fun-4375c1246e81">Writing middleware in #golang and how Go makes it so much fun</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://eager.io/blog/go-and-json/">Go and JSON</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://gowebexamples.com/">Learn Web Programming in Go by Examples</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://husio.github.io/blog/post/accessing-data-in-go/">Accessing data in Go</a></label></li>
</ul>

<h3 id="concurrency">Concurrency</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@trevor4e/learning-gos-concurrency-through-illustrations-8c4aff603b3">Learning Go&rsquo;s Concurrency Through Illustrations</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://www.sohamkamani.com/blog/2018/02/18/golang-data-race-and-how-to-fix-it/">Data races in Go(Golang) and how to fix them</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://pragmacoders.com/multithreading-go-tutorial/">Multithreading in Go - A Tutorial</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@cep21/gos-append-is-not-always-thread-safe-a3034db7975">Go’s append is not always thread safe</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://guzalexander.com/2013/12/06/golang-channels-tutorial.html">Golang channels tutorial</a></label></li>
</ul>

<h3 id="go-modules">Go Modules</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://roberto.selbach.ca/intro-to-go-modules/">Introduction to Go modules</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.golang.org/using-go-modules">Using Go Modules</a></label></li>
</ul>

<h2 id="intermediate">Intermediate</h2>

<h3 id="code-design">Code Design</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://peter.bourgon.org/go-best-practices-2016/">Go best practices, six years in</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@cep21/aspects-of-a-good-go-library-7082beabb403">Aspects of a good Go library</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://dave.cheney.net/2016/08/20/solid-go-design">Solid Go Design</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://peter.bourgon.org/go-for-industrial-programming/">Go for Industrial Programming</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://middlemost.com/failure-is-your-domain/">Failure is your Domain</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@cep21/what-accept-interfaces-return-structs-means-in-go-2fe879e25ee8">What “accept interfaces, return structs” means in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.chewxy.com/2018/03/18/golang-interfaces/">How to Use Go Interfaces</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://www.calhoun.io/pitfalls-of-context-values-and-how-to-avoid-or-mitigate-them/">Pitfalls of context values and how to avoid or mitigate them in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@felipedutratine/how-to-organize-the-go-struct-in-order-to-save-memory-c78afcf59ec2">How to organize the go struct, in order to save memory</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://www.oreilly.com/ideas/how-to-ship-production-grade-go">How to ship production-grade Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://8thlight.com/blog/javier-saldana/2015/02/06/loose-coupling-in-go-lang.html">Loose Coupling in Go lang</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://commandcenter.blogspot.co.nz/2014/01/self-referential-functions-and-design.html">Self-referential functions and the design of options</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis">Functional Options for Friendly APIs</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://hackthology.com/object-oriented-inheritance-in-go.html">Object Oriented Inheritance in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://commandcenter.blogspot.com/2017/12/error-handling-in-upspin.html">Error handling in Upsin</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://ewencp.org/blog/golang-iterators/index.html">Iterators in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://0x46.net/thoughts/2018/12/29/go-libraries/">Stop writing broken Go libraries</a></label></li>
</ul>

<h3 id="concurrency-1">Concurrency</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@thejasbabu/concurrency-patterns-golang-5c5e1bcd0833">Concurrency Patterns</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@matryer/stopping-goroutines-golang-1bf28799c1cb">Stopping goroutines</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://pocketgophers.com/limit-concurrent-use/">Ways to limit concurrent resource use</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@matryer/make-ctrl-c-cancel-the-context-context-bd006a8ad6ff">Make Ctrl+C cancel the context.Context</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@cep21/how-to-correctly-use-context-context-in-go-1-7-8f2c0fafdf39#.bdz5qnna7">How to correctly use context.Context in Go 1.7</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://rakyll.org/leakingctx/">Using contexts to avoid leaking goroutines</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.golang.org/pipelines">Go Concurrency Patterns: Pipelines and cancellation</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://kylewbanks.com/blog/tutorial-synchronizing-state-with-mutexes-golang">Tutorial: Synchronizing State with Mutexes in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://dahernan.github.io/2015/02/04/context-and-cancellation-of-goroutines/">Context and Cancellation of goroutines</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://hackernoon.com/dancing-with-go-s-mutexes-92407ae927bf">Dancing with Go&rsquo;s Mutexes</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://rabarar.github.io/blog/2015/02/17/goroutines-channels/">GoRoutines, Channels, and Proper Exits</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://www.rapidloop.com/blog/golang-channels-tips-tricks.html">Buffered channels in Go: Tips &amp; Tricks</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://blog.sgmansfield.com/2016/06/how-to-block-forever-in-go/">How to Block Forever in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://rakyll.org/mutexprofile/">Mutex Profile</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://blog.mozilla.org/services/2014/03/12/sane-concurrency-with-go/">Sane Concurrency with Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://mijailovic.net/2017/05/09/error-handling-patterns-in-go/">Error handling patterns in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@val_deleplace/does-the-race-detector-catch-all-data-races-1afed51d57fb">Does the race detector catch all data races?</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://nomad.uk.net/articles/interesting-ways-of-using-go-channels.html">Interesting ways of using Go channels</a></label></li>
</ul>

<h3 id="testing">Testing</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://markjberger.com/testing-web-apps-in-golang/">Testing Web Apps in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://tutorialedge.net/golang/intro-testing-in-go/">An Introduction to Testing in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742">5 simple tips and tricks for writing unit tests in #golang</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://segment.com/blog/5-advanced-testing-techniques-in-go/">5 Advanced Testing Techniques in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://danmux.com/posts/the_cult_of_go_test/">The Cult of Go Test</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://nathanleclaire.com/blog/2015/10/10/interfaces-and-composition-for-effective-unit-testing-in-golang/">Interfaces and Composition for Effective Unit Testing in Golang</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@xoen/go-testing-technique-testing-json-http-requests-76d9ce0e11f#.95p1r8n16">Go Testing Technique: Testing JSON HTTP Requests</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://www.meetspaceapp.com/2016/05/16/acceptance-testing-go-webapps-with-cookies.html">Acceptance Testing Go Web Applications with Cookies</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://blog.questionable.services/article/testing-http-handlers-go/">Testing Your (HTTP) Handlers in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://deadbeef.me/2018/05/go-test">Go test your tests in Go with go test</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://github.com/quii/learn-go-with-tests">Learn Go with tests</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@PurdonKyle/unit-testing-golang-http-middleware-c7727ca896ea">Unit Testing Golang HTTP Middleware</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://splice.com/blog/lesser-known-features-go-test/">Lesser-Known Features of Go Test</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://sendgrid.com/blog/when-writing-unit-tests-dont-use-mocks/">When Writing Unit Tests, Don’t Use Mocks</a></label></li>
</ul>

<h3 id="web-1">Web</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.gopheracademy.com/advent-2016/exposing-go-on-the-internet/">Exposing Go on the Internet</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.cloudflare.com/the-complete-guide-to-golang-net-http-timeouts/">The complete guide to Go net/http timeouts</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@mlowicki/http-s-proxy-in-golang-in-less-than-100-lines-of-code-6a51c2f2c38c">HTTP(S) Proxy in Golang in less than 100 lines of code</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://weberc2.bitbucket.io/posts/golang-docker-scratch-app.html">Deploying Go apps on Docker scratch images</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.gopheracademy.com/advent-2017/kubernetes-ready-service/">Write a Kubernetes-ready service from zero step-by-step</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://eng.tapjoy.com/blog-list/how-to-write-router-tests-in-go">How To Write Router Tests in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://nanxiao.me/en/a-brief-intro-of-tcp-keep-alive-in-gos-http-implementation/">A brief intro of TCP keep-alive in Go’s HTTP implementation</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://jackcanty.com/build-a-web-crawler-in-go.html">Build a Web Crawler in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://mmcloughlin.com/posts/your-pprof-is-showing">Your pprof is showing: IPv4 scans reveal exposed net/http/pprof endpoints:</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://blog.questionable.services/article/map-string-interface/">HTTP Request Contexts &amp; Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.codeship.com/using-object-oriented-web-servers-go/">Using Object-Oriented Web Servers in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://pliutau.com/handle-http-request-errors-in-go/">Handle HTTP Request Errors in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://ahmet.im/blog/golang-json-decoder-pitfalls/">Go json.Decoder Considered Harmful</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://medium.com/@shijuvar/building-high-performance-apis-in-go-using-grpc-and-protocol-buffers-2eda5b80771b">Building High Performance APIs In Go Using gRPC And Protocol Buffers</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://www.minaandrawos.com/2016/05/14/udp-vs-tcp-in-golang/">Implementing UDP vs TCP in Golang</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/@nate510/don-t-use-go-s-default-http-client-4804cb19f779">Don&rsquo;t use Go&rsquo;s default HTTP client (in production)</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.gopheracademy.com/advent-2016/http-client/">Writing an API Client in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.gopheracademy.com/advent-2017/seekable-http/">Seeking around in an HTTP object</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://www.calhoun.io/intro-to-templates-p3-functions/">Using Functions Inside Go Templates</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="http://www.meetspaceapp.com/2016/05/23/writing-a-data-mapper-in-go-without-an-orm.html">Writing a Data Mapper in Go without an ORM</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://www.alexedwards.net/blog/organising-database-access">Practical Persistence in Go: Organising Database Access</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/statuscode/how-i-write-go-http-services-after-seven-years-37c208122831">How I write Go HTTP services after seven years</a></label></li>
</ul>

<h3 id="tools">Tools</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://rakyll.org/go-tool-flags/">Go tooling essentials</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.golang.org/profiling-go-programs">Profiling Go Programs</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/google-cloud/go-tooling-in-action-eca6882ff3bc#.d9ob4wyj4">Go Tooling in Action</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.cloudflare.com/using-go-as-a-scripting-language-in-linux/">Using Go as a scripting language in Linux</a></label></li>
</ul>

<h3 id="trivia">Trivia</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://talks.golang.org/2012/10things.slide">10 things you (probably) don&rsquo;t know about Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://talks.godoc.org/github.com/davecheney/presentations/gopher-puzzlers.slide">Gopher Puzzlers</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://scene-si.org/2016/06/13/advanced-go-tips-and-tricks/">Advanced Go Tips And Tricks</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://allegro.tech/2017/07/golang-slices-gotcha.html">Golang slices gotcha</a></label></li>
</ul>

<h3 id="diagnostics">Diagnostics</h3>

<ul class="task-list">
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://golang.org/doc/diagnostics.html">Diagnostics</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="http://www.integralist.co.uk/posts/profiling-go/">Profiling Go</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://dave.cheney.net/2014/06/07/five-things-that-make-go-fast">Five things that make Go fast</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://stackimpact.com/blog/practical-golang-benchmarks/">Practical Go Benchmarks</a></label></li>
</ul>

<h3 id="language">Language</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://goinbigdata.com/golang-pass-by-pointer-vs-pass-by-value/">Golang: pass by pointer vs pass by value</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://dave.cheney.net/2017/04/29/there-is-no-pass-by-reference-in-go">There is no pass-by-reference in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/golangspec/variadic-functions-in-go-13c33182b851">Variadic functions in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://jmoiron.net/blog/crossing-streams-a-love-letter-to-ioreader/">Crossing Streams: a Love Letter to io.Reader</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://jordanorelli.com/post/42369331748/function-types-in-go-golang">Function Types in Go (golang)</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://research.swtch.com/godata">research!rsc: Go Data Structures</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.gopheracademy.com/advent-2018/interfaces-and-reflect/">The Relationship Between Interfaces and Reflection</a></label></li>
</ul>

<h3 id="miscellaneous">Miscellaneous</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/square-corner-blog/always-be-closing-3d5fda0e00da">Always Be Closing</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://joeshaw.org/dont-defer-close-on-writable-files/">Don&rsquo;t defer Close() on writable files</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://zupzup.org/io-pipe-go/">Examples For Using io.Pipe in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.carlmjohnson.net/post/2016-11-27-how-to-use-go-generate/">How to Use go:generate</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://nesv.github.io/golang/2014/02/25/worker-queues-in-go.html">Writing worker queues, in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://www.opsdash.com/blog/job-queues-in-go.html">Job Queues in Go - OpsDash</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://kgrz.io/reading-files-in-go-an-overview.html">Reading files in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.bramp.net/post/2017/10/02/vanity-go-import-paths/">Vanity Go Import Paths</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://medium.com/golangspec/tags-in-golang-3e5db0b8ef3e">Tags in Golang</a></label></li>
</ul>

<h2 id="advanced">Advanced</h2>

<h3 id="low-level-concerns">Low Level Concerns</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://rakyll.org/scheduler/">Go&rsquo;s work-stealing scheduler</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="http://morsmachine.dk/go-scheduler">The Go scheduler</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="http://davidwong.fr/goasm/">Go Assembly by Example</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://www.tapirgames.com/blog/golang-memory-alignment">Address Alignments in Go</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://github.com/golang/go/blob/master/src/runtime/HACKING.md">Hacking the Scheduler</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://www.ardanlabs.com/blog/2018/08/scheduling-in-go-part2.html">Scheduling In Go - Part II</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://syslog.ravelin.com/anatomy-of-a-function-call-in-go-f6fc81b80ecc">Anatomy of a function call in Go</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://www.ardanlabs.com/blog/2015/02/scheduler-tracing-in-go.html">Scheduler Tracing in Go</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://blog.gopheracademy.com/advent-2017/unsafe-pointer-and-system-calls/">unsafe.Pointer and system calls</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://go101.org/article/unsafe.html">Type-Unsafe Pointers</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://pauladamsmith.com/blog/2016/08/go-1.7-ssa.html">Looking at your program’s structure in Go 1.7</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="http://blog.sgmansfield.com/2016/06/managing-syscall-overhead-with-crypto-rand/">Managing Syscall Overhead with crypto/rand</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://cavaliercoder.com/blog/optimized-abs-for-int64-in-go.html">Optimized abs() for int64 in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://www.agardner.me/golang/garbage/collection/gc/escape/analysis/2015/10/18/go-escape-analysis.html">Golang escape analysis</a></label></li>
</ul>

<h3 id="performance">Performance</h3>

<ul class="task-list">
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/?utm_source=golangweekly&amp;utm_medium=email">Allocation Efficiency in High-Performance Go Services</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="http://marcio.io/2015/07/handling-1-million-requests-per-minute-with-golang/">Handling 1 Million Requests per Minute with Go</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://medium.com/@val_deleplace/go-code-refactoring-the-23x-performance-hunt-156746b522f7">Go code refactoring : the 23x performance hunt</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://medium.freecodecamp.org/million-websockets-and-go-cc58418460bb">A Million WebSockets and Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://github.com/dgryski/go-perfbook">go-perfbook</a></label></li>
</ul>

<h3 id="garbage-collection">Garbage Collection</h3>

<ul class="task-list">
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/">Allocation Efficiency in High-Performance Go Services</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://making.pusher.com/golangs-real-time-gc-in-theory-and-practice/">Golang&rsquo;s Real-time GC in Theory and Practice</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://www.cockroachlabs.com/blog/how-to-optimize-garbage-collection-in-go/">How to Optimize Garbage Collection in Go</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://blog.twitch.tv/go-memory-ballast-how-i-learnt-to-stop-worrying-and-love-the-heap-26c2462549a2">Go memory ballast: How I learned to stop worrying and love the heap</a></label></li>
</ul>

<h3 id="concurrency-2">Concurrency</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.golang.org/advanced-go-concurrency-patterns">Advanced Go Concurrency Patterns</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://rodaine.com/2018/08/x-files-sync-golang/">The X-Files: Avoiding Concurrency Boilerplate with golang.org/x/sync</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://texlution.com/post/golang-lock-free-values-with-atomic-value/">Golang lock-free values with atomic.Value</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://blog.golang.org/share-memory-by-communicating">Share Memory by Communicating</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://blog.golang.org/concurrency-is-not-parallelism">Concurrency is not parallelism</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://blog.golang.org/context">Go Concurrency Patterns: Context</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://blog.golang.org/go-concurrency-patterns-timing-out-and">Go Concurrency Patterns: Timing out, moving on</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://www.ardanlabs.com/blog/2014/01/concurrency-goroutines-and-gomaxprocs.html">Concurrency, Goroutines and GOMAXPROCS</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="http://blog.sgmansfield.com/2016/01/locking-in-crypto-rand/">Locking in crypto/rand</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://scene-si.org/2016/10/12/stateful-locks-in-go/">Stateful locks in Go</a></label></li>
</ul>

<h3 id="json-encoding-and-decoding">JSON Encoding and Decoding</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.gopheracademy.com/advent-2016/advanced-encoding-decoding/">Advanced Encoding and Decoding Techniques</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="http://choly.ca/post/go-json-marshalling/">Custom JSON Marshalling in Go</a></label></li>
</ul>

<h3 id="miscellaneous-1">Miscellaneous</h3>

<ul class="task-list">
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.golang.org/normalization">Text normalization in Go</a></label></li>
<li><label><input type="checkbox" checked disabled class="task-list-item"> <a href="https://blog.gopheracademy.com/advent-2017/mphf/">Minimal Perfect Hash Functions</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://medium.com/@sameer_74231/go-experience-report-for-generics-google-metrics-api-b019d597aaa4">Go Experience Report for Generics: Google metrics API</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://github.com/teh-cmc/go-internals">go-internals</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="https://medium.com/@dgryski/go-fuzz-github-com-arolek-ase-3c74d5a3150c">go-fuzz github.com/arolek/ase</a></label></li>
<li><label><input type="checkbox" disabled class="task-list-item"> <a href="http://blog.leahhanson.us/post/recursecenter2016/recipeparser.html">Learning Go: Lexing and Parsing</a></label></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Building a website</title>
            <link>https://www.maxlivinci.com/blog/2019-04-20-building-a-website/</link>
            <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
            
            <guid>https://www.maxlivinci.com/blog/2019-04-20-building-a-website/</guid>
            <description>Since I started programming, I’ve found myself interested in many subjects and technologies. However, despite a few efforts, I never managed to get interested in front-end development.
I have tried several frameworks: Bootstrap, React, and a few more. I admit I enjoy way more developing something with React than doing plain HTML/CSS/JS, but let’s face it, it’s just not my cup of tea. Sometimes I have to work on front-end projects, but whenever I can avoid it, I do it.</description>
            <content type="html"><![CDATA[<p>Since I started programming, I’ve found myself interested in many subjects and technologies. However, despite a few efforts, I never managed to get interested in front-end development.</p>

<p>I have tried several frameworks: <a href="https://getbootstrap.com/">Bootstrap</a>, <a href="https://reactjs.org/">React</a>, and a few more. I admit I enjoy way more developing something with <code>React</code> than doing plain <code>HTML</code>/<code>CSS</code>/<code>JS</code>, but let’s face it, it’s just not my cup of tea. Sometimes I have to work on front-end projects, but whenever I can avoid it, I do it.</p>

<p>So, when I decided to built this website, I made a list of required properties:</p>

<ul>
<li>Write the less code possible</li>
<li>Don’t write any CSS</li>
<li>Have both a Dark and Light mode</li>
<li>Build something responsive</li>
<li>Build something deployable as a static web page</li>
</ul>

<p>With those constraints, I quickly found out I needed a <code>static site generator</code> and learnt about <a href="https://jekyllrb.com/">Jekyll</a> and <a href="https://gohugo.io/">Hugo</a>. For the hosting part, a <a href="https://pages.github.com/">Github</a> Page with enforced HTTPS (because who releases a plain HTTP website in 2019 ?).</p>

<p><img src="https://d33wubrfki0l68.cloudfront.net/30790d6888bd8af863fb2b5c33a7f337cdbda243/4e867/images/hugo-logo-wide.svg" alt="" /></p>

<p>As for the choice of a <code>static site generator</code>, I decided to go with <code>Hugo</code>. The reason ? <a href="https://themes.gohugo.io/hugo-theme-hello-friend-ng/">The theme I liked the most</a> was built for it, and as I really didn’t want to write any <code>CSS</code>, that was a major factor. Also, I’m more familiar with the <code>Go</code> environment than the <code>Ruby</code> one, that might have been another factor.</p>

<p>Even if <code>Hugo</code>’s documentation is very complete, I still experienced a few issues while deploying the website to <code>GitHub Pages</code>.</p>

<p>The way I handled the situation:</p>

<ul>
<li>My <code>GitHub</code> repository is private</li>
<li>My website’s files are on a <code>develop</code> branch</li>
<li>The website’s content is on the <code>master</code> branch</li>
<li>I’m using a custom domain name</li>
</ul>

<p>All my development happens on the <code>develop</code> branch, and I deploy to <code>master</code> using this script:</p>

<pre><code class="language-bash">#!/usr/bin/env sh

DIR=$(dirname &quot;$0&quot;)

echo &quot;Deleting old publication&quot;
rm -rf public

if [[ $(git status -s) ]]
then
    echo &quot;The working directory is dirty. Please commit any pending changes.&quot;
    exit 1;
fi

mkdir public
git worktree prune
rm -rf .git/worktrees/public/

echo &quot;Checking out gh-pages branch into public&quot;
git worktree add -B master public origin/master

echo &quot;Removing existing files&quot;
rm -rf public/*

echo &quot;Generating site&quot;
hugo

echo &quot;Updating master branch&quot;
cd public &amp;&amp; git add --all &amp;&amp; git commit -m &quot;Publishing to master (publish.sh)&quot;
git push origin master
cd ..
rm -rf public
</code></pre>

<p>In order to resolve any issues with the custom domain, I had to create <code>CNAME</code> file, as described <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#use-a-custom-domain">here</a></p>

<pre><code>echo &quot;www.maxlivinci.com&quot; &gt; static/CNAME
</code></pre>

<blockquote>
<p>Heavily inspired by: <a href="https://gohugo.io/hosting-and-deployment/hosting-on-github/#put-it-into-a-script-1">https://gohugo.io/hosting-and-deployment/hosting-on-github/#put-it-into-a-script-1</a></p>
</blockquote>

<p>I hope this will be useful to anyone experiencing any difficulties with deploying a <code>Hugo</code>-generated website to <code>GitHub Pages</code>!</p>
]]></content>
        </item>
        
    </channel>
</rss>
