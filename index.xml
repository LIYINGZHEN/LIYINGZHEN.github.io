<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Max Li</title>
    <link>https://www.maxlivinci.com/</link>
    <description>Recent content on Max Li</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.maxlivinci.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Add Two Numbers Represented By Linked Lists</title>
      <link>https://www.maxlivinci.com/algorithm/linked_list_add_two_numbers/</link>
      <pubDate>Sat, 25 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/algorithm/linked_list_add_two_numbers/</guid>
      <description>public class AddTwoNumbers { static Node head1, head2; static class Node { int data; Node next; Node(int d) { data = d; next = null; } } int getLength(Node head) { if (head == null) { return 0; } return 1 + getLength(head.next); } void printList(Node head) { while (head != null) { System.out.print(head.data + &amp;#34; &amp;#34;); head = head.next; } System.out.println(&amp;#34;&amp;#34;); } Node reverse(final Node head) { if (head == null || head.</description>
    </item>
    
    <item>
      <title>Reverse Every Alternate k Nodes In a Linked List</title>
      <link>https://www.maxlivinci.com/algorithm/linked_list_reverse_every_alternate_k_nodes/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/algorithm/linked_list_reverse_every_alternate_k_nodes/</guid>
      <description>public class ReverseInAlternateKPair { Node head; class Node { int data; Node next; Node(int d) {data = d; next = null; } } public void push(int new_data) { Node new_node = new Node(new_data); new_node.next = head; head = new_node; } void printList() { Node temp = head; while (temp != null) { System.out.print(temp.data + &amp;#34; &amp;#34;); temp = temp.next; } System.out.println(); } Node reverse(final Node head, final int k) { if (head.</description>
    </item>
    
    <item>
      <title>Reverse a Linked List</title>
      <link>https://www.maxlivinci.com/algorithm/linked_list_reverse_a_linked_list/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/algorithm/linked_list_reverse_a_linked_list/</guid>
      <description>public class RevertLinkedList { Node head; public class Node { int data; Node next; public Node (int d) { this.data = d; } } public void push(int data) { Node newHead = new Node(data); newHead.next = head; head = newHead; } public void printList(Node head) { if (head == null) { System.out.println(&amp;#34;null&amp;#34;); return; } System.out.printf(&amp;#34;%s -&amp;gt; &amp;#34;, head.data); printList(head.next); } // Time: O(n), Space: O(1)  public Node revertLinkedList(Node head) { if (head == null || head.</description>
    </item>
    
    <item>
      <title>Merge Sort for Linked Lists</title>
      <link>https://www.maxlivinci.com/algorithm/linked_list_merge_sort/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/algorithm/linked_list_merge_sort/</guid>
      <description>public class MergeSort { Node head; public class Node { int data; Node next; public Node(int d) { this.data = d; } } public void printList(final Node head) { if (head == null) { System.out.println(&amp;#34;null&amp;#34;); return; } System.out.printf(&amp;#34;%s -&amp;gt; &amp;#34;, head.data); printList(head.next); } public void push(final int data) { Node newNode = new Node(data); newNode.next = head; head = newNode; } public Node merge(Node a, Node b) { if (a == null) { return b; } if (b == null) { return a; } Node newHead = null; if (a.</description>
    </item>
    
    <item>
      <title>Count Inversions In an Array</title>
      <link>https://www.maxlivinci.com/algorithm/array_count_inversions_in_an_array/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/algorithm/array_count_inversions_in_an_array/</guid>
      <description>public class CountInversions { static int merge(int[] arr, int l, int h) { if (l &amp;gt;= h) { return 0; } int m = l + (h - l) / 2; int[] left = new int[m - l + 1]; int[] right = new int[h - m]; for (int i = 0; i &amp;lt; left.length; i++) { left[i] = arr[l + i]; } for (int i = 0; i &amp;lt; right.</description>
    </item>
    
    <item>
      <title>Find Pair In a Sorted Rotated Array</title>
      <link>https://www.maxlivinci.com/algorithm/array_find_pair_in_a_sorted_rotated_array/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/algorithm/array_find_pair_in_a_sorted_rotated_array/</guid>
      <description>public class PairsInSortedRotated { // Time: O(n), Space: O(1)  static void findPair(int[] arr, int target) { if (arr.length == 0) { return; } int n = arr.length; int pivot = n - 1; for (int i = 0; i &amp;lt; n - 1; i++) { if (arr[i] &amp;gt; arr[i + 1]) { pivot = i; break; } } int l = (pivot + 1) % n; int h = pivot; while (l !</description>
    </item>
    
    <item>
      <title>Rotate An Array</title>
      <link>https://www.maxlivinci.com/algorithm/array_rotate_an_array/</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/algorithm/array_rotate_an_array/</guid>
      <description>public class ArrayRotation { // Time: O(n), Space: O(1)  static void rotate(final int[] arr, final int d) { int n = arr.length; int rotation = d % n; if (rotation == 0) { return; } int count = 0; for (int start = 0; count &amp;lt; arr.length; start++) { int currIdx = start; int prev = arr[currIdx]; do { int nextIdx = (currIdx - rotation + n) % n; int temp = arr[nextIdx]; arr[nextIdx] = prev; prev = temp; count++; currIdx = nextIdx; } while (currIdx !</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.maxlivinci.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/about/</guid>
      <description>Hi there!</description>
    </item>
    
  </channel>
</rss>