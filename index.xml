<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>YING ZHEN LI</title>
    <link>https://www.maxlivinci.com/</link>
    <description>Recent content on YING ZHEN LI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.maxlivinci.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Slices from the ground up</title>
      <link>https://www.maxlivinci.com/blog/2019-04-22-slices-from-the-ground-up/</link>
      <pubDate>Mon, 22 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-04-22-slices-from-the-ground-up/</guid>
      <description>Arrays Arrays in Go have two relevant properties:
 They have a fixed size; [5]int is is distinct from [3]int. They are value types. Consider this example:  package main import &amp;quot;fmt&amp;quot; func main() { var a [5]int b := a b[2] = 7 fmt.Println(a, b) // prints [0 0 0 0 0] [0 0 7 0 0] }  The statement b := a declares a new variable, b, of type [5]int, and copies the contents of a to b.</description>
    </item>
    
    <item>
      <title>Gopher Reading List</title>
      <link>https://www.maxlivinci.com/blog/2019-04-21-gopher-reading-list/</link>
      <pubDate>Sun, 21 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-04-21-gopher-reading-list/</guid>
      <description>Here is a reading list of blog posts about Go. It aspires to include only the most useful and relevant material that anyone writing Go should eventually read. By definition, the list is a work in progress.
Rather than being comprehensive, the list is a curated selection fixed at 200 entries.
Go is growing fast and so are the number of blog posts about it. If an interested reader knows of a great post not on this list, please open an issue with a link to the post.</description>
    </item>
    
    <item>
      <title>Building a website</title>
      <link>https://www.maxlivinci.com/blog/2019-04-20-building-a-website/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/blog/2019-04-20-building-a-website/</guid>
      <description>Since I started programming, I’ve found myself interested in many subjects and technologies. However, despite a few efforts, I never managed to get interested in front-end development.
I have tried several frameworks: Bootstrap, React, and a few more. I admit I enjoy way more developing something with React than doing plain HTML/CSS/JS, but let’s face it, it’s just not my cup of tea. Sometimes I have to work on front-end projects, but whenever I can avoid it, I do it.</description>
    </item>
    
    <item>
      <title>PostgreSQL</title>
      <link>https://www.maxlivinci.com/old/2019-03-25-postgres/</link>
      <pubDate>Mon, 25 Mar 2019 18:02:49 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-25-postgres/</guid>
      <description>Setting up a password for the postgres role By default, local connections to PostgreSQL use the peer authentication sys- tem. That means that instead of asking for a password, they check to see if we are currently logged into a user (a linux user) that matches a user name in Postgres. We are going to change the way we do authentication and instead tell Postgres to use an encrypted password, but first we need to actually set a password for the postgres user.</description>
    </item>
    
    <item>
      <title>HTTP Response codes</title>
      <link>https://www.maxlivinci.com/old/2019-03-17-http-response-codes/</link>
      <pubDate>Sun, 17 Mar 2019 07:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-17-http-response-codes/</guid>
      <description>400 Bad Request This response indicates that the request could not be understood by the client due to a malformed request or due to a failure of domain validation (missing data, or an operation that would cause invalid state).
401 Unauthorized This indicates that the request requires user authentication and will include a WWWAuthenticate header containing a challenge applicable to the requested resource. If the user has included the required credentials in the WWW-Authenticate header, then the response should include an error object that may contain relevant diagnostic information.</description>
    </item>
    
    <item>
      <title>ELK Stack</title>
      <link>https://www.maxlivinci.com/old/2019-03-17-elk-stack/</link>
      <pubDate>Sun, 17 Mar 2019 06:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-17-elk-stack/</guid>
      <description>Elasticsearch, Logstash, and Kibana are pretty much the industry standard when it comes to logging verbose data. All of the output which would traditionally be streamed to a log file is stored in a central location which you can query with a graphical interface tool, Kibana.
Elasticsearch is our datastore for our logging data, Kibana is the application we will use for querying this data, and Logstash is used for reading the data from your application logs and storing it in Elasticsearch.</description>
    </item>
    
    <item>
      <title>Go</title>
      <link>https://www.maxlivinci.com/old/2019-03-16-go/</link>
      <pubDate>Sat, 16 Mar 2019 19:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-16-go/</guid>
      <description>2.3. Zero Value https://play.golang.org/p/yb6qYVZKYKR
2.6.2. Package Initialization Programs initialize and begin execution from the main package. If the main package imports other packages, they will be imported in the compile time. If one package is imported many times, it will be only compiled once. After importing packages, programs will initialize the constants and variables within the imported packages, then execute the init function if it exists, and so on. After all the other packages are initialized, programs will initialize constants and variables in the main package, then execute the init function inside the package if it exists.</description>
    </item>
    
    <item>
      <title>Drone</title>
      <link>https://www.maxlivinci.com/old/2019-03-14-drone/</link>
      <pubDate>Thu, 14 Mar 2019 08:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-14-drone/</guid>
      <description> The .drone.yml file  </description>
    </item>
    
    <item>
      <title>Linux</title>
      <link>https://www.maxlivinci.com/old/2019-03-14-linux/</link>
      <pubDate>Thu, 14 Mar 2019 07:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-14-linux/</guid>
      <description> Commands ls -l # Changes the working directory to your home directory. cd # Changes the working directory to the previous working directory. cd - # i - interactive # v - verbose cp -iv /etc/passwd . # i - interactive # r - recursive rm -ir fun  </description>
    </item>
    
    <item>
      <title>Networking</title>
      <link>https://www.maxlivinci.com/old/2019-03-14-networking/</link>
      <pubDate>Thu, 14 Mar 2019 06:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-14-networking/</guid>
      <description>Primer on Latency and Bandwidth  Latency - The time from the source sending a packet to the destination receiving it
 Bandwidth - Maximum throughput of a logical or physical communication path
  Notes
 Network data rates are typically measured in bits per second (bps), whereas data rates for non-network equipment are typically shown in bytes per second (Bps). This is a common source of confusion, pay close attention to the units.</description>
    </item>
    
    <item>
      <title>Nginx</title>
      <link>https://www.maxlivinci.com/old/2019-03-13-nginx/</link>
      <pubDate>Wed, 13 Mar 2019 06:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-13-nginx/</guid>
      <description> Preserve the default nginx.conf cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.backup-original  cp global.conf /etc/nginx/conf.d/
server { listen 0.0.0.0:80; server_name _; root /var/www/html/website; index index.html index.htm; access_log /var/log/nginx/default_access.log; error_log /var/log/nginx/default_error.log; }  cp nginx.conf /etc/nginx/nginx.conf
user www-data; worker_processes 4; pid /run/nginx.pid; daemon off; events { } http { sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; gzip on; gzip_disable &amp;quot;msie6&amp;quot;; include /etc/nginx/conf.d/*.conf; }  </description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://www.maxlivinci.com/old/2019-03-13-redis/</link>
      <pubDate>Wed, 13 Mar 2019 06:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-13-redis/</guid>
      <description>Commands redis-cli # Local redis-cli -h host -p port -a password # Run Commands on the Remote Server redis-cli INFO memory  Data Types  Strings Lists Hashes Sets Sorted Sets  Strings # SET first &amp;quot;First Key value&amp;quot; GET first # EXPIRE command adds an expiration time (in seconds) to a given key. EXPIRE first 10 # TTL (Time To Live) command returns the amount of seconds a given key has left to live.</description>
    </item>
    
    <item>
      <title>MongoDB</title>
      <link>https://www.maxlivinci.com/old/2019-03-09-mongodb/</link>
      <pubDate>Sun, 10 Mar 2019 16:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-09-mongodb/</guid>
      <description>Indexing and query optimization  Indexes in MongoDB are very important. Indexes that use more than one key like this are called compound indexes. The order of keys in a compound index matters. Aa query where one term demands an exact match and another specifies a range requires a compound index where the range key comes second.  For example:
If we have this query, then the manufacturer shoud be the first index.</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>https://www.maxlivinci.com/old/2019-03-08-docker/</link>
      <pubDate>Fri, 08 Mar 2019 13:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-08-docker/</guid>
      <description>Docker Terminology Image - Images are the building blocks of the Docker world. You launch your containers from images.
Container - Docker helps you build and deploy containers inside of which you can package your applications and services.
Docker Compose - Allows you to run stacks of containers to represent application stacks.
Commands # Checking that the docker binary works. docker info # Build a docker image. docker build -t &amp;lt;image-name&amp;gt;:&amp;lt;tag&amp;gt; # name docker image --no-cache # do not use cache .</description>
    </item>
    
    <item>
      <title>Kubernetes</title>
      <link>https://www.maxlivinci.com/old/2019-03-08-kubernetes/</link>
      <pubDate>Fri, 08 Mar 2019 12:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-03-08-kubernetes/</guid>
      <description>Terminology Minikube: Minikube is a tool that sets up a single-node cluster that’s great for both testing Kubernetes and developing apps locally.
Kubelet:
Master Node: The master node, which hosts the Kubernetes Control Plane that controls and manages the whole Kubernetes system.
Node: Worker nodes that run the actual applications you deploy.
Pod: Running containers in Kubernetes.
Service: Enabling clients to discover and talk to pods.
Commands General Commands # Starting a Minikube virtual machine.</description>
    </item>
    
    <item>
      <title>Table Driven Tests</title>
      <link>https://www.maxlivinci.com/old/2019-01-27-table-driven-tests/</link>
      <pubDate>Sun, 27 Jan 2019 16:48:37 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-27-table-driven-tests/</guid>
      <description>package main import &amp;quot;testing&amp;quot; func TestCoverage(t *testing.T) { type args struct { condition bool } tests := []struct { name string args args wantErr bool }{ // TODO: Add test cases. } for _, tt := range tests { t.Run(tt.name, func(t *testing.T) { if err := Coverage(tt.args.condition); (err != nil) != tt.wantErr { t.Errorf(&amp;quot;Coverage() error = %v, wantErr %v&amp;quot;, err, tt.wantErr) } }) } }  </description>
    </item>
    
    <item>
      <title>Middleware in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-27-middleware-in-go/</link>
      <pubDate>Sun, 27 Jan 2019 16:40:32 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-27-middleware-in-go/</guid>
      <description>package middleware import ( &amp;quot;log&amp;quot; &amp;quot;net/http&amp;quot; &amp;quot;time&amp;quot; ) // Middleware is what all middleware functions will return type Middleware func(http.HandlerFunc) http.HandlerFunc // ApplyMiddleware will apply all middleware, the last // arguments will be the // outer wrap for context passing purposes func ApplyMiddleware(h http.HandlerFunc, middleware ...Middleware) http.HandlerFunc { applied := h for _, m := range middleware { applied = m(applied) } return applied } // Logger logs requests, this will use an id passed in via // SetID() func Logger(l *log.</description>
    </item>
    
    <item>
      <title>Strconv in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-27-strconv-in-go/</link>
      <pubDate>Sun, 27 Jan 2019 11:03:14 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-27-strconv-in-go/</guid>
      <description> ParseFloat strconv.ParseFloat(amount, 64)  ParseInt strconv.ParseInt(result, 10, 64)  FormatInt strconv.FormatInt(amount, 10)  ParseInt s := &amp;quot;1234&amp;quot; if res, err := strconv.ParseInt(s, 10, 64); err != nil { return err }  </description>
    </item>
    
    <item>
      <title>Btyes in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-27-btyes-in-go/</link>
      <pubDate>Sun, 27 Jan 2019 10:01:57 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-27-btyes-in-go/</guid>
      <description> NewBuffer bytes.NewBuffer(secrets)  NewBufferString bytes.NewBufferString(secrets).Bytes()  </description>
    </item>
    
    <item>
      <title>JSON in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-27-json-in-go/</link>
      <pubDate>Sun, 27 Jan 2019 09:59:40 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-27-json-in-go/</guid>
      <description> JSONData type JSONData struct { Name string `json:&amp;quot;name&amp;quot;` Age int `json:&amp;quot;age&amp;quot;` }  Marshal if d, err := json.Marshal(t); err != nil { return nil, err } return bytes.NewBuffer(d), nil  Unmarshal res := make(map[string]string) if err := json.Unmarshal([]byte(`{&amp;quot;key&amp;quot;: &amp;quot;value&amp;quot;}`), &amp;amp;res); err != nil { return err }  NewDecoder Working with streams
res := make(map[string]string) b := bytes.NewReader([]byte(`{&amp;quot;key2&amp;quot;: &amp;quot;value2&amp;quot;}`)) decoder := json.NewDecoder(b) if err := decoder.Decode(&amp;amp;res); err != nil { return err }  </description>
    </item>
    
    <item>
      <title>Ioutil in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-27-ioutil-in-go/</link>
      <pubDate>Sun, 27 Jan 2019 09:53:14 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-27-ioutil-in-go/</guid>
      <description> ReadAll payload, err := ioutil.ReadAll(recorder.Body); err != nil { t.Errorf(&amp;quot;Error parsing response body: %v&amp;quot;, err) }  </description>
    </item>
    
    <item>
      <title>Bufio in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-27-bufio-in-go/</link>
      <pubDate>Sun, 27 Jan 2019 09:33:26 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-27-bufio-in-go/</guid>
      <description> NewScanner scanner := bufio.NewScanner(r) // r io.Reader scanner.Split(bufio.ScanWords) for scanner.Scan() { result[scanner.Text()]++ }  NewReader r := bufio.NewReader(f) line, err := r.ReadString(&#39;\n&#39;)  </description>
    </item>
    
    <item>
      <title>OpenAPI Specification</title>
      <link>https://www.maxlivinci.com/old/2019-01-26-open-api-specification/</link>
      <pubDate>Sat, 26 Jan 2019 18:40:48 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-26-open-api-specification/</guid>
      <description>OpenAPI lets us define RESTful APIs in a standardized manner, and they can be defined without being tied down to any particular programming language or framework being used.
Let&amp;rsquo;s list the general structure of an OpenAPI specification and use it to redefine the Books API described in Chapter 4, The RESTful Web.
If we look at the Books API title, we can define the following elements to describe the API:</description>
    </item>
    
    <item>
      <title>Go Environment</title>
      <link>https://www.maxlivinci.com/old/2019-01-26-go-environment/</link>
      <pubDate>Sat, 26 Jan 2019 11:20:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-26-go-environment/</guid>
      <description>GOROOT To access to the Go binary and its libraries
GOPATH To tell the Go compiler where to find the source code for the project and its dependencies.
src/ Contain the source code of our projects and their dependencies.
pkg/ To store reusable machine code that can be readily included in our Go binary.
bin/ Go compiles and builds our projects into executable binaries and places them in this directory.</description>
    </item>
    
    <item>
      <title>Worker pools</title>
      <link>https://www.maxlivinci.com/old/2019-01-26-worker-pools/</link>
      <pubDate>Sat, 26 Jan 2019 09:52:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-26-worker-pools/</guid>
      <description>A worker pool is a set of threads that are about to process jobs assigned to them.  Example package main import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;strconv&amp;quot; &amp;quot;sync&amp;quot; &amp;quot;time&amp;quot; ) type Client struct { id int integer int } type Data struct { job Client square int } var ( size = 10 clients = make(chan Client, size) data = make(chan Data, size) ) func worker(w *sync.WaitGroup) { for c := range clients { square := c.</description>
    </item>
    
    <item>
      <title>Channels in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-25-channels-in-go/</link>
      <pubDate>Fri, 25 Jan 2019 21:39:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-25-channels-in-go/</guid>
      <description>A channel is a communication mechanism that allows us to pass data between goroutines. It is an in-built data type in Go. Data can be passed using one of the primitive data types or we can create our own complex data type using structs.
Writing to a channel The code in this subsection will teach you how to write to a channel. Writing the x value to the c channel is as easy as writing c &amp;lt;- x.</description>
    </item>
    
    <item>
      <title>Concurrency and parallelism</title>
      <link>https://www.maxlivinci.com/old/2019-01-25-concurrency-and-parallelism/</link>
      <pubDate>Fri, 25 Jan 2019 21:08:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-25-concurrency-and-parallelism/</guid>
      <description>Computer and software programs are useful because they do a lot of laborious work very fast and can also do multiple things at once. We want our programs to be able to do multiple things simultaneously, that is, multitask, and the success of a programming language can depend on how easy it is to write and understand multitasking programs.
Concurrency and parallelism are two terms that we are bound to come across often when looking into multitasking and they are often used interchangeably.</description>
    </item>
    
    <item>
      <title>Unix Signals</title>
      <link>https://www.maxlivinci.com/old/2019-01-25-unix-signals/</link>
      <pubDate>Fri, 25 Jan 2019 20:34:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-25-unix-signals/</guid>
      <description>Ctrl + C sends the SIGINT signal
 number 1 SIGTERM
 number 9 SIGKILL
  package main import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;os/signal&amp;quot; &amp;quot;syscall&amp;quot; &amp;quot;time&amp;quot; ) func handle(signal os.Signal) { fmt.Println(&amp;quot;Received:&amp;quot;, signal) } func main() { sigs := make(chan os.Signal, 1) signal.Notify(sigs) go func() { for { sig := &amp;lt;-sigs switch sig { case os.Interrupt: handle(sig) case syscall.SIGTERM: handle(sig) os.Exit(0) case syscall.SIGUSR2: fmt.Println(&amp;quot;Handling syscall.SIGUSR2!&amp;quot;) default: fmt.Println(&amp;quot;Ignoring:&amp;quot;, sig) } } }() for { fmt.</description>
    </item>
    
    <item>
      <title>Interfaces in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-24-interface-in-go/</link>
      <pubDate>Thu, 24 Jan 2019 18:28:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-24-interface-in-go/</guid>
      <description>Interfaces provide a way to declare types that define only behavior. This behavior can be implemented by concrete types, such as struct or named types, via methods. When a concrete type implements the set of methods for an interface, values of the concrete type can be assigned to variables of the interface type. Then method calls against the interface value actually call into the equivalent method of the concrete value.</description>
    </item>
    
    <item>
      <title>Struct in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-22-pointers-in-go/</link>
      <pubDate>Tue, 22 Jan 2019 09:34:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-22-pointers-in-go/</guid>
      <description>Pointers provide a way to share data across function boundaries. Having the ability to share and reference data with a pointer provides flexbility. It also helps our programs minimize the amount of memory they need and can add some extra performance.
Notes  Use pointers to share data. Values in Go are always pass by value. &amp;ldquo;Value of&amp;rdquo;, what&amp;rsquo;s in the box. &amp;ldquo;Address of&amp;rdquo; ( &amp;amp; ), where is the box.</description>
    </item>
    
    <item>
      <title>rune in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-20-rune-in-go/</link>
      <pubDate>Sun, 20 Jan 2019 10:41:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-20-rune-in-go/</guid>
      <description>A rune is an int32 value, and therefore it is a Go type that is used for representing a Unicode code point. A Unicode code point or code position is a numerical value that is usually used for representing single Unicode characters.
 NOTE: You can consider a string as a collection of runes.
 A rune literal is a character in single quotes. You may also consider a rune literal as a rune constant.</description>
    </item>
    
    <item>
      <title>The constant generator iota</title>
      <link>https://www.maxlivinci.com/old/2019-01-20-the-constant-generator-iota/</link>
      <pubDate>Sun, 20 Jan 2019 10:05:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-20-the-constant-generator-iota/</guid>
      <description>The constant generator iota is used for declaring a sequence of related values that uses incrementing numbers without the need to type each one of them explicitly.
const ( Zero Digit = iota One Two Three Four )  Here you see the definition of a constant generator iota based on Digit, which is equivalent to the following declaration of four constants:
const ( Zero = 0 One = 1 Two = 2 Three = 3 Four = 4 )  </description>
    </item>
    
    <item>
      <title>Byte Slices</title>
      <link>https://www.maxlivinci.com/old/2019-01-19-byte-slices/</link>
      <pubDate>Sat, 19 Jan 2019 17:20:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-19-byte-slices/</guid>
      <description>A byte slice is a slice where its type is byte. You can create a new byte slice named s as follows:
s := make([]byte, 5)  There is nothing special in the way that you can access a byte slice compared to the other types of slices. It is just that byte slices are used in file input and output operations.</description>
    </item>
    
    <item>
      <title>General Go coding advices</title>
      <link>https://www.maxlivinci.com/old/2019-01-19-general-go-coding-advices/</link>
      <pubDate>Sat, 19 Jan 2019 17:05:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-19-general-go-coding-advices/</guid>
      <description>The following list offers practical advices that will help you write better Go code:
 If you have an error in a Go function, either log it or return it, do not do both unless you have a really good reason for doing so! Go interfaces define behaviors, not data and data structures. Use the io.Reader and io.Writer interfaces because they make your code more extensible. Make sure that you pass a pointer to a variable of a function only when needed.</description>
    </item>
    
    <item>
      <title>Find out Go Environment</title>
      <link>https://www.maxlivinci.com/old/2019-01-19-find-out-go-environment/</link>
      <pubDate>Sat, 19 Jan 2019 17:02:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-19-find-out-go-environment/</guid>
      <description>package main import ( &amp;quot;fmt&amp;quot; &amp;quot;runtime&amp;quot; ) func main() { fmt.Print(&amp;quot;You are using &amp;quot;, runtime.Compiler, &amp;quot; &amp;quot;) fmt.Println(&amp;quot;on a&amp;quot;, runtime.GOARCH, &amp;quot;machine&amp;quot;) fmt.Println(&amp;quot;Using Go version&amp;quot;, runtime.Version()) fmt.Println(&amp;quot;Number of CPUs:&amp;quot;, runtime.NumCPU()) fmt.Println(&amp;quot;Number of Goroutines:&amp;quot;, runtime.NumGoroutine()) }  xecuting goEnv.go on a macOS High Sierra machine with Go version 1.9.2 will create the following output:
$ go run goEnv.go You are using gc on a amd64 machine Using Go version go1.9.2 Number of CPUs: 8 Number of Goroutines: 1  </description>
    </item>
    
    <item>
      <title>Writing to log files</title>
      <link>https://www.maxlivinci.com/old/2019-01-19-writing-to-log-files/</link>
      <pubDate>Sat, 19 Jan 2019 15:44:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-19-writing-to-log-files/</guid>
      <description>Generally speaking, using a log file to write some information is considered a better practice than writing the same output on the screen for two reasons:
 The output does not get lost as it is stored in a file
 You can search and process log files using Unix tools such as grep(1), awk(1), and sed(1), which cannot be done when messages are printed on a Terminal window</description>
    </item>
    
    <item>
      <title>Working with command-line arguments</title>
      <link>https://www.maxlivinci.com/old/2019-01-19-working-with-command-line-arguments/</link>
      <pubDate>Sat, 19 Jan 2019 15:39:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-19-working-with-command-line-arguments/</guid>
      <description>package main import ( &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; &amp;quot;strconv&amp;quot; ) func main() { if len(os.Args) == 1 { fmt.Println(&amp;quot;Please give one or more floats.&amp;quot;) os.Exit(1) } arguments := os.Args min, _ := strconv.ParseFloat(arguments[1], 64) max, _ := strconv.ParseFloat(arguments[1], 64) for i := 2; i &amp;lt; len(arguments); i++ { n, _ := strconv.ParseFloat(arguments[i], 64) if n &amp;lt; min { min = n } if n &amp;gt; max { max = n } } fmt.</description>
    </item>
    
    <item>
      <title>Reading from Standard Input</title>
      <link>https://www.maxlivinci.com/old/2019-01-19-reading-from-standard-input/</link>
      <pubDate>Sat, 19 Jan 2019 15:33:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-19-reading-from-standard-input/</guid>
      <description>package main import ( &amp;quot;bufio&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;os&amp;quot; ) func main() { var f *os.File f = os.Stdin defer f.Close() scanner := bufio.NewScanner(f) for scanner.Scan() { fmt.Println(&amp;quot;&amp;gt;&amp;quot;, scanner.Text()) } }  The execution of stdIN.go will produce the following type of output:
$ go run stdIN.go 21 &amp;gt; 21 This is Mihalis! &amp;gt; This is Mihalis!  In Unix, you can tell a program to stop reading data from standard input by pressing Ctrl + D.</description>
    </item>
    
    <item>
      <title>Working with Cokkies</title>
      <link>https://www.maxlivinci.com/old/2019-01-19-working-with-cookies/</link>
      <pubDate>Sat, 19 Jan 2019 08:18:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-19-working-with-cookies/</guid>
      <description>Code Review Writing Cookies func cookieWriteHandler(formatter *render.Render) http.HandlerFunc { return func(w http.ResponseWriter, req *http.Request) { expiration := time.Now().Add(2 * 24 * time.Hour) cookie := http.Cookie{ Name: &amp;quot;sample&amp;quot;, Value: &amp;quot;this is a cookie&amp;quot;, Expires: expiration, } http.SetCookie(w, &amp;amp;cookie) formatter.JSON(w, http.StatusOK, &amp;quot;cookie set&amp;quot;) } }  Reading Cookies func cookieReadHandler(formatter *render.Render) http.HandlerFunc { return func(w http.ResponseWriter, req *http.Request) { cookie, err := req.Cookie(&amp;quot;sample&amp;quot;) if err == nil { fmt.Fprint(w, cookie.Value) } else { fmt.</description>
    </item>
    
    <item>
      <title>An Example of Using RabbitMQ From Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-19-an-example-of-using-rabbitmq-from-go/</link>
      <pubDate>Sat, 19 Jan 2019 07:42:05 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-19-an-example-of-using-rabbitmq-from-go/</guid>
      <description>Sending We&amp;rsquo;ll call our message publisher (sender) send.go and our message consumer (receiver) receive.go. The publisher will connect to RabbitMQ, send a single message, then exit.
package main import ( &amp;quot;log&amp;quot; &amp;quot;github.com/streadway/amqp&amp;quot; ) func failOnError(err error, msg string) { if err != nil { log.Fatalf(&amp;quot;%s: %s&amp;quot;, msg, err) } } func main() { conn, err := amqp.Dial(&amp;quot;amqp://guest:guest@localhost:5672/&amp;quot;) failOnError(err, &amp;quot;Failed to connect to RabbitMQ&amp;quot;) defer conn.Close() ch, err := conn.Channel() failOnError(err, &amp;quot;Failed to open a channel&amp;quot;) defer ch.</description>
    </item>
    
    <item>
      <title>CQRS</title>
      <link>https://www.maxlivinci.com/old/2019-01-19-cqrs/</link>
      <pubDate>Sat, 19 Jan 2019 07:00:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-19-cqrs/</guid>
      <description>Introducing Command Query Responsibility Segregation CQRS is a fancy pattern name that means decoupling the input and the output of your system.</description>
    </item>
    
    <item>
      <title>Building an API server with Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-15-building-an-api-server-with-go/</link>
      <pubDate>Tue, 15 Jan 2019 19:41:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-15-building-an-api-server-with-go/</guid>
      <description>File Structures main.go service/ handlers_test.go handlers.go server.go middleware.go types.go  Libraries introduction  gorilla/mux -&amp;gt; A powerful URL router and dispatcher for golang unrolled/render -&amp;gt; Go package for easily rendering JSON responses. codegangsta/negroni -&amp;gt; Idiomatic HTTP Middleware for Golang  Install Dependencies go get github.com/urfave/negroni go get github.com/gorilla/mux go get github.com/unrolled/render  Create our types In service folder create types.go
package service type fulfillmentStatus struct { SKU string `json:&amp;quot;sku&amp;quot;` ShipsWithin int `json:&amp;quot;ships_within&amp;quot;` QuantityInStock int `json:&amp;quot;qty_in_stock&amp;quot;` }  TDD In service folder create handlers_test.</description>
    </item>
    
    <item>
      <title>Event-Driven Architecture</title>
      <link>https://www.maxlivinci.com/old/2019-01-13-event-driven-architecture/</link>
      <pubDate>Sun, 13 Jan 2019 13:44:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-13-event-driven-architecture/</guid>
      <description>Asynchronous processing With asynchronous processing, all the communication to the downstream application happens out of process leveraging a queue or a message broker as an intermediary.</description>
    </item>
    
    <item>
      <title>Service discovery</title>
      <link>https://www.maxlivinci.com/old/2019-01-13-service-discovery/</link>
      <pubDate>Sun, 13 Jan 2019 10:19:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-13-service-discovery/</guid>
      <description> Server-side service discovery Client-side discovery </description>
    </item>
    
    <item>
      <title>Benchmarking and profiling in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-13-benchmarking-and-profiling-go/</link>
      <pubDate>Sun, 13 Jan 2019 09:18:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-13-benchmarking-and-profiling-go/</guid>
      <description>&amp;ldquo;Programmers waste enormous amounts of time thinking about, or worrying about, the speed of noncritical parts of their programs, and these attempts at efficiency have a strong negative impact when debugging and maintenance are considered. We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%.&amp;rdquo; - Donald Knuth</description>
    </item>
    
    <item>
      <title>Testing in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-13-testing-in-go/</link>
      <pubDate>Sun, 13 Jan 2019 08:50:00 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-13-testing-in-go/</guid>
      <description>Source files and associated test files are placed in the same package/folder The name of the test file for any given source file is &amp;lt;source-file-name&amp;gt;_test.go Test functions need to have the &amp;ldquo;Test&amp;rdquo; prefix, and the next character in the function name should be capitalized  func TestSearchHandlerReturnsBadRequestWhenBlankSearchCriteriaIsSent(t *testing.T) { handler := SearchHandler{} data, _ := json.Marshal(searchRequest{}) request := httptest.NewRequest(&amp;quot;POST&amp;quot;, &amp;quot;/search&amp;quot;, bytes.NewReader(data)) response := httptest.NewRecorder() handler.ServeHTTP(response, request) if response.Code != http.</description>
    </item>
    
    <item>
      <title>HTTP headers</title>
      <link>https://www.maxlivinci.com/old/2019-01-12-http-headers/</link>
      <pubDate>Sat, 12 Jan 2019 19:52:17 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-12-http-headers/</guid>
      <description>Authorization - string Authorization is one of the most commonly used request headers, even if you have a public read only API I advise you to ask the user to authorize their requests.</description>
    </item>
    
    <item>
      <title>URI path design for REST services</title>
      <link>https://www.maxlivinci.com/old/2019-01-12-uri-path-design-for-rest-services/</link>
      <pubDate>Sat, 12 Jan 2019 19:37:17 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-12-uri-path-design-for-rest-services/</guid>
      <description>Collections A collection is a directory of resources typically broken by parameters to access an individual document. For example:
GET /cats -&amp;gt; All cats in the collection GET /cats/1 -&amp;gt; Single document for a cat 1  When defining a collection, we should always use a plural noun such as cats or people for the collection name.
Documents A document is a resource pointing to a single object, similar to a row in a database.</description>
    </item>
    
    <item>
      <title>Serving Static Files In Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-12-servering-static-files/</link>
      <pubDate>Sat, 12 Jan 2019 17:15:17 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-12-servering-static-files/</guid>
      <description>func main() { port := 8080 cathandler := http.FileServer(http.Dir(&amp;quot;./images&amp;quot;)) // images/... http.Handle(&amp;quot;/cat/&amp;quot;, http.StripPrefix(&amp;quot;/cat/&amp;quot;, cathandler)) // images/cat/... http.Handle(&amp;quot;/cat/&amp;quot;, cathandler) log.Printf(&amp;quot;Server starting on port %v\n&amp;quot;, 8080) log.Fatal(http.ListenAndServe(fmt.Sprintf(&amp;quot;:%v&amp;quot;, port), nil)) }  </description>
    </item>
    
    <item>
      <title>Reading and writing JSON</title>
      <link>https://www.maxlivinci.com/old/2019-01-12-reading-and-writing-json/</link>
      <pubDate>Sat, 12 Jan 2019 15:43:17 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-12-reading-and-writing-json/</guid>
      <description>Writing JSON func main() { port := 8080 http.HandleFunc(&amp;quot;/&amp;quot;, helloWorldHandler) log.Printf(&amp;quot;Server starting on port %v\n&amp;quot;, 8080) log.Fatal(http.ListenAndServe(fmt.Sprintf(&amp;quot;:%v&amp;quot;, port), nil)) } type HelloWorldResponse struct { // change the output field to be &amp;quot;message&amp;quot; Message string `json:&amp;quot;message&amp;quot;` // do not output this field Author string `json:&amp;quot;-&amp;quot;` // do not output the field if the value is empty Date string `json:&amp;quot;,omitempty&amp;quot;` // convert output to a string and rename &amp;quot;id&amp;quot; Id int `json:&amp;quot;id, string&amp;quot;` } func helloWorldHandler(w http.</description>
    </item>
    
    <item>
      <title>Panic and Recover in Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-19-panic-and-recover-in-go/</link>
      <pubDate>Sat, 12 Jan 2019 14:16:34 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-19-panic-and-recover-in-go/</guid>
      <description>Strictly speaking, panic() is a built-in Go function that terminates the current flow of a Go program and starts panicking!
On the other hand, the recover() function, which is also a built-in Go function, allows you to take back the control of a goroutine that just panicked using panic().
package main import ( &amp;quot;fmt&amp;quot; ) func a() { fmt.Println(&amp;quot;Inside a()&amp;quot;) defer func() { if c := recover(); c != nil { fmt.</description>
    </item>
    
    <item>
      <title>An Example of Using Nsq From Go</title>
      <link>https://www.maxlivinci.com/old/2019-01-11-an-example-of-using-nsq-from-go/</link>
      <pubDate>Fri, 11 Jan 2019 10:27:05 +0100</pubDate>
      
      <guid>https://www.maxlivinci.com/old/2019-01-11-an-example-of-using-nsq-from-go/</guid>
      <description>NSQ is a message queue, similar to RabbitMQ. I decided I’d give it a whirl.
Install Nsq brew install nsq  Launch Nsq nsqlookupd &amp;amp; nsqd --lookupd-tcp-address=127.0.0.1:4160 &amp;amp; nsqadmin --lookupd-http-address=127.0.0.1:4161 &amp;amp;  Get Go client library go get github.com/nsqio/go-nsq  Create a producer package main import ( &amp;quot;log&amp;quot; &amp;quot;github.com/bitly/go-nsq&amp;quot; ) func main() { config := nsq.NewConfig() w, _ := nsq.NewProducer(&amp;quot;127.0.0.1:4150&amp;quot;, config) err := w.Publish(&amp;quot;write_test&amp;quot;, []byte(&amp;quot;test&amp;quot;)) if err != nil { log.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.maxlivinci.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.maxlivinci.com/about/</guid>
      <description>Hey, I&amp;rsquo;m Max. I am a software engineer with 3+ years of experience working on-site and remotely. I have worked on and launched several production-grade applications. I have a strong background in developing React.js, Node.js and Golang and I can easily adapt to various types of projects and architectures.
I am flexible to project demands and shifting of priorities. I thrive in unfamiliar situations and enjoy opportunities to learn and gain exposure to new ideas and experiences.</description>
    </item>
    
  </channel>
</rss>